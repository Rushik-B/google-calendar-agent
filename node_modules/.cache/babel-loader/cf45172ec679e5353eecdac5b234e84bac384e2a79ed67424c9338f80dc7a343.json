{"ast":null,"code":"var _jsxFileName = \"/Users/Rushik/Documents/Projects/caledar-example/Calendar-app-latest-working/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, memo, useMemo, Suspense, lazy } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\n// Import our Chat UI components instead of the old NewUI\nimport { ChatHeader, ChatContainer, ChatMessages, ChatMessage, ChatInput, SettingsButton, CalendarSettings, WelcomeMessage, CalendarSelectionComponent } from './ChatUI';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\n\n// Define the script at global level to ensure the functions are globally accessible\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst setupGlobalFunctions = () => {\n  if (typeof window !== 'undefined') {\n    // Create a custom event for scheduling breaks\n    window.scheduleBreak = (startTime, endTime) => {\n      console.log(\"scheduleBreak called with:\", startTime, endTime);\n      // Dispatch a custom event that the React component can listen for\n      window.dispatchEvent(new CustomEvent('scheduleCalendarItem', {\n        detail: {\n          type: 'break',\n          startTime,\n          endTime\n        }\n      }));\n    };\n\n    // Create a custom event for scheduling tasks  \n    window.scheduleTask = (startTime, endTime) => {\n      console.log(\"scheduleTask called with:\", startTime, endTime);\n      window.dispatchEvent(new CustomEvent('scheduleCalendarItem', {\n        detail: {\n          type: 'task',\n          startTime,\n          endTime\n        }\n      }));\n    };\n\n    // Log to verify functions are attached\n    console.log(\"Global scheduling functions attached:\", typeof window.scheduleBreak === 'function', typeof window.scheduleTask === 'function');\n  }\n};\n\n// Memoize the renderEventContent function to avoid recreating it on each render\nconst renderEventContent = eventInfo => {\n  var _eventInfo$event$exte, _eventInfo$event$exte2, _eventInfo$event$exte3, _eventInfo$event$exte4;\n  // Determine if this is a suggested slot or existing event\n  const isSuggested = ((_eventInfo$event$exte = eventInfo.event.extendedProps) === null || _eventInfo$event$exte === void 0 ? void 0 : _eventInfo$event$exte.suggestedSlot) === true;\n  const isExisting = ((_eventInfo$event$exte2 = eventInfo.event.extendedProps) === null || _eventInfo$event$exte2 === void 0 ? void 0 : _eventInfo$event$exte2.existingEvent) === true;\n\n  // Format the time more cleanly\n  let timeText = eventInfo.timeText || '';\n  if (timeText.includes('-')) {\n    // Simplify time range display\n    const times = timeText.split('-');\n    timeText = times[0].trim() + ' - ' + times[1].trim();\n  }\n\n  // Get the calendar name if available\n  let calendarName = '';\n  if (isExisting && (_eventInfo$event$exte3 = eventInfo.event.extendedProps) !== null && _eventInfo$event$exte3 !== void 0 && _eventInfo$event$exte3.calendarName) {\n    calendarName = `(${eventInfo.event.extendedProps.calendarName})`;\n  }\n\n  // Get the event title with fallback options\n  const title = eventInfo.event.title || ((_eventInfo$event$exte4 = eventInfo.event.extendedProps) === null || _eventInfo$event$exte4 === void 0 ? void 0 : _eventInfo$event$exte4.summary) || (isSuggested ? 'Suggested Time' : 'Event');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `event-content ${isSuggested ? 'suggested-event' : 'existing-event'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      children: timeText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      children: [title, \" \", calendarName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n// Define the Calendar component outside of the main component\nconst CalendarComponent = /*#__PURE__*/memo(_c = ({\n  events,\n  handleEventClick,\n  handleDatesSet,\n  loading,\n  renderEventContent\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `calendar-container ${loading ? 'loading' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      initialView: \"timeGridWeek\",\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\n      },\n      events: events,\n      eventClick: handleEventClick,\n      eventContent: renderEventContent,\n      height: \"800px\",\n      nowIndicator: true,\n      datesSet: handleDatesSet,\n      slotMinTime: \"07:00:00\",\n      slotMaxTime: \"23:00:00\",\n      eventTimeFormat: {\n        hour: 'numeric',\n        minute: '2-digit',\n        meridiem: 'short'\n      },\n      slotLabelFormat: {\n        hour: 'numeric',\n        minute: '2-digit',\n        hour12: true\n      },\n      allDaySlot: false,\n      eventDisplay: \"block\",\n      eventBackgroundColor: \"#4285f4\",\n      eventBorderColor: \"#3b78e7\",\n      eventTextColor: \"#ffffff\",\n      displayEventTime: true,\n      displayEventEnd: true,\n      forceEventDuration: true,\n      eventMinHeight: 30,\n      lazyFetching: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n});\n_c2 = CalendarComponent;\nCalendarComponent.displayName = 'CalendarComponent';\n\n// Note: We're using CalendarSelectionComponent from ChatUI.jsx\n\nfunction NaturalLanguageForm() {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  // eslint-disable-next-line no-unused-vars\n  const [availableSlots, setAvailableSlots] = useState([]);\n  const [calendarEvents, setCalendarEvents] = useState([]);\n  const [existingEvents, setExistingEvents] = useState([]);\n  const [showCalendar, setShowCalendar] = useState(false);\n  const [eventDetails, setEventDetails] = useState({});\n  const [selectedSlots, setSelectedSlots] = useState([]);\n  // Add cache for events data\n  const [eventsCache, setEventsCache] = useState({});\n  const [fetchingEvents, setFetchingEvents] = useState(false);\n\n  // Chat-specific state\n  const [chatMessages, setChatMessages] = useState([]);\n  const [showSettings, setShowSettings] = useState(false);\n\n  // Call the setup function on load\n  useEffect(() => {\n    setupGlobalFunctions();\n    // Add welcome message\n    setChatMessages([{\n      sender: 'bot',\n      type: 'welcome'\n    }]);\n  }, []);\n  const [calendars, setCalendars] = useState([]);\n  const [selectedCalendars, setSelectedCalendars] = useState([]);\n  const [dateRange, setDateRange] = useState({\n    start: new Date(),\n    end: new Date(new Date().setDate(new Date().getDate() + 7))\n  });\n\n  // Helper function to format date to YYYY-MM-DD\n  const formatDate = date => {\n    const d = new Date(date);\n    let month = '' + (d.getMonth() + 1);\n    let day = '' + d.getDate();\n    const year = d.getFullYear();\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n    return [year, month, day].join('-');\n  };\n\n  // Helper function to get color for a specific calendar\n  const getCalendarColor = (calendarId, darker = false) => {\n    // Find the calendar in our list\n    const calendar = calendars.find(cal => cal.id === calendarId);\n    if (calendar && calendar.backgroundColor) {\n      // Enhance color vibrancy by ensuring full opacity\n      let color = calendar.backgroundColor;\n\n      // If it's an RGBA color, convert to fully opaque\n      if (color.startsWith('rgba')) {\n        const rgbaPattern = /rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*[\\d.]+\\s*\\)/;\n        const match = color.match(rgbaPattern);\n        if (match) {\n          color = `rgb(${match[1]}, ${match[2]}, ${match[3]})`;\n        }\n      }\n      if (darker) {\n        // Create a slightly darker version for the border\n        return darkenColor(color, 0.2);\n      }\n      return color;\n    }\n    // Default color if calendar not found - using a more vibrant blue\n    return darker ? '#1565C0' : '#1E88E5';\n  };\n\n  // Helper function to darken a color\n  const darkenColor = (color, amount) => {\n    try {\n      // Handle RGB format\n      if (color.startsWith('rgb')) {\n        const rgbPattern = /rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/;\n        const match = color.match(rgbPattern);\n        if (match) {\n          let r = parseInt(match[1], 10);\n          let g = parseInt(match[2], 10);\n          let b = parseInt(match[3], 10);\n          r = Math.max(0, Math.floor(r * (1 - amount)));\n          g = Math.max(0, Math.floor(g * (1 - amount)));\n          b = Math.max(0, Math.floor(b * (1 - amount)));\n          return `rgb(${r}, ${g}, ${b})`;\n        }\n      }\n\n      // Remove the hash if it exists for hex colors\n      color = color.replace('#', '');\n\n      // Parse the color\n      let r = parseInt(color.substring(0, 2), 16);\n      let g = parseInt(color.substring(2, 4), 16);\n      let b = parseInt(color.substring(4, 6), 16);\n\n      // Darken the color\n      r = Math.max(0, Math.floor(r * (1 - amount)));\n      g = Math.max(0, Math.floor(g * (1 - amount)));\n      b = Math.max(0, Math.floor(b * (1 - amount)));\n\n      // Convert back to hex\n      return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n    } catch (e) {\n      console.error('Error darkening color:', e);\n      return color; // Return original color if there's an error\n    }\n  };\n\n  // Define fetchExistingEvents before it's used in the event listener\n  const fetchExistingEvents = useCallback(async (forceRefresh = false) => {\n    // Prevent multiple simultaneous requests\n    if (fetchingEvents) return;\n    try {\n      setFetchingEvents(true);\n      const startDate = formatDate(dateRange.start);\n      const endDate = formatDate(dateRange.end);\n\n      // Skip logging in production\n      if (process.env.NODE_ENV !== 'production') {\n        console.log(\"Fetching events from:\", startDate, \"to\", endDate);\n      }\n\n      // Create the calendar IDs parameter\n      const calendarIds = selectedCalendars.map(cal => cal.id).join(',');\n\n      // Create a cache key based on date range and selected calendars\n      const cacheKey = `${startDate}_${endDate}_${calendarIds}`;\n\n      // Check if we have cached data and not forcing refresh\n      if (!forceRefresh && eventsCache[cacheKey] && eventsCache[cacheKey].expiry > Date.now()) {\n        setExistingEvents(eventsCache[cacheKey].data);\n        setFetchingEvents(false);\n        return;\n      }\n\n      // Add retry logic\n      let retries = 0;\n      const maxRetries = 3;\n      let response;\n      while (retries < maxRetries) {\n        try {\n          response = await axios.get(`http://127.0.0.1:5000/api/get-events?start=${startDate}&end=${endDate}&calendars=${calendarIds}`);\n          break; // Success, exit retry loop\n        } catch (err) {\n          const currentRetry = retries; // Capture current value to avoid the loop reference issue\n          retries++;\n          if (currentRetry === maxRetries - 1) throw err;\n          // Wait before retrying (exponential backoff)\n          await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, currentRetry + 1)));\n        }\n      }\n      if (response.data.success) {\n        // Check if there are any events in the response\n        let events = response.data.events || [];\n\n        // If no events are returned and we're in development mode, add some mock events for testing\n        if (events.length === 0 && process.env.NODE_ENV === 'development') {\n          console.log(\"No events returned from API, adding mock events for testing\");\n          // Create a few mock events for the current week\n          const now = new Date();\n          const tomorrow = new Date(now);\n          tomorrow.setDate(tomorrow.getDate() + 1);\n          events = [{\n            id: 'mock-1',\n            title: 'Team Meeting',\n            start: new Date(now.getFullYear(), now.getMonth(), now.getDate(), 10, 0).toISOString(),\n            end: new Date(now.getFullYear(), now.getMonth(), now.getDate(), 11, 0).toISOString(),\n            calendarId: 'primary',\n            calendarName: 'Primary Calendar'\n          }, {\n            id: 'mock-2',\n            title: 'Lunch Break',\n            start: new Date(now.getFullYear(), now.getMonth(), now.getDate(), 12, 0).toISOString(),\n            end: new Date(now.getFullYear(), now.getMonth(), now.getDate(), 13, 0).toISOString(),\n            calendarId: 'primary',\n            calendarName: 'Primary Calendar'\n          }, {\n            id: 'mock-3',\n            title: 'Project Review',\n            start: new Date(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0).toISOString(),\n            end: new Date(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 30).toISOString(),\n            calendarId: 'work',\n            calendarName: 'Work Calendar'\n          }];\n        }\n        if (events.length > 0) {\n          // Process all events at once with minimal logging\n          const eventsWithMetadata = events.map(event => ({\n            ...event,\n            title: event.title || event.summary || \"Untitled Event\",\n            existingEvent: true,\n            backgroundColor: event.backgroundColor || getCalendarColor(event.calendarId),\n            borderColor: event.borderColor || getCalendarColor(event.calendarId, true),\n            textColor: event.textColor || '#ffffff',\n            classNames: ['calendar-event'] // Add a class for additional styling\n          }));\n\n          // Update the cache with a 5-minute expiration\n          setEventsCache(prev => ({\n            ...prev,\n            [cacheKey]: {\n              data: eventsWithMetadata,\n              expiry: Date.now() + 5 * 60 * 1000 // 5 minutes\n            }\n          }));\n          setExistingEvents(eventsWithMetadata);\n        } else {\n          setExistingEvents([]);\n        }\n      } else {\n        console.error('Error fetching events:', response.data.message);\n      }\n    } catch (error) {\n      console.error('Error fetching events:', error);\n      setError('Failed to load events. Please try again.');\n    } finally {\n      setFetchingEvents(false);\n    }\n  }, [dateRange, formatDate, getCalendarColor, selectedCalendars, eventsCache, fetchingEvents, setError]);\n\n  // Define handleSubmit with useCallback before it's used in handleScheduleItem\n  const handleSubmit = useCallback(async e => {\n    e.preventDefault();\n    console.log(\"handleSubmit called with text:\", text);\n    if (!text.trim()) return;\n\n    // Add user message to chat\n    setChatMessages(prev => [...prev, {\n      sender: 'user',\n      content: text\n    }]);\n    setLoading(true);\n    setError(\"\");\n    setMessage(\"\");\n    setAvailableSlots([]);\n    setCalendarEvents([]);\n    setSelectedSlots([]);\n    try {\n      console.log(\"Making API call with text:\", text);\n      const response = await axios.post('http://127.0.0.1:5000/api/natural-language-event', {\n        text\n      });\n      console.log(\"API response:\", response.data);\n      if (response.data.success) {\n        // Handle the response in chat format\n        if (response.data.humanizedResponse) {\n          if (response.data.intent === \"check_free_time\") {\n            // For check_free_time intent with HTML\n            setChatMessages(prev => [...prev, {\n              sender: 'bot',\n              content: response.data.humanizedResponse\n            }]);\n            setText(\"\");\n          } else {\n            // For other intents with text response\n            setChatMessages(prev => [...prev, {\n              sender: 'bot',\n              content: response.data.humanizedResponse\n            }]);\n          }\n        }\n        if (response.data.intent === \"find_time\") {\n          setAvailableSlots(response.data.availableSlots);\n          setCalendarEvents(response.data.events || []);\n          setShowCalendar(true);\n\n          // Check if we have the insufficientTime flag\n          if (response.data.insufficientTime) {\n            // Add error message to chat\n            setChatMessages(prev => [...prev, {\n              sender: 'bot',\n              type: 'error',\n              content: `INSUFFICIENT TIME: ${response.data.humanizedResponse || response.data.message} Select these slots or try a different timeframe.`\n            }]);\n          } else if (!response.data.humanizedResponse) {\n            // Only set this default message if humanizedResponse wasn't already set\n            setChatMessages(prev => [...prev, {\n              sender: 'bot',\n              content: \"Here are suggested time slots on your calendar. Click on slots to select/deselect them for scheduling.\"\n            }]);\n          }\n          setEventDetails({\n            summary: response.data.calendar_title || getEventSummaryFromText(text),\n            description: text,\n            calendarId: response.data.predicted_calendar || \"primary\"\n          });\n        } else if (response.data.intent === \"view_events\") {\n          // Just display the humanized response for view_events, no calendar needed\n          setText(\"\");\n        } else if (response.data.intent === \"Create event\" && !response.data.humanizedResponse) {\n          // Fallback for create event if no humanizedResponse is available\n          setChatMessages(prev => [...prev, {\n            sender: 'bot',\n            type: 'success',\n            content: `Event created! ${response.data.eventLink ? `View it here: ${response.data.eventLink}` : ''}`\n          }]);\n          setText(\"\");\n        } else {\n          // For other intents or if we already set humanizedResponse\n          setText(\"\");\n        }\n      } else {\n        // Add error message to chat\n        setChatMessages(prev => [...prev, {\n          sender: 'bot',\n          type: 'error',\n          content: `Error: ${response.data.humanizedResponse || response.data.message}`\n        }]);\n      }\n    } catch (error) {\n      // Add error message to chat\n      setChatMessages(prev => {\n        var _error$response, _error$response$data;\n        return [...prev, {\n          sender: 'bot',\n          type: 'error',\n          content: `Error: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message}`\n        }];\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [text, setLoading, setText, setChatMessages, setAvailableSlots, setCalendarEvents, setSelectedSlots, setShowCalendar, setEventDetails]);\n\n  // Event handler for scheduling items - using useCallback to avoid dependency issues\n  const handleScheduleItem = useCallback(event => {\n    console.log(\"Custom event received:\", event.detail);\n    const {\n      type,\n      startTime,\n      endTime\n    } = event.detail;\n    const startDate = new Date();\n    const formattedDate = startDate.toLocaleDateString('en-US', {\n      month: 'long',\n      day: 'numeric',\n      year: 'numeric'\n    });\n    if (type === 'break') {\n      const newText = `Schedule a break on ${formattedDate} from ${startTime} to ${endTime}`;\n      console.log(\"Setting text for break:\", newText);\n      setText(newText);\n      // Submit after React has updated the state\n      setTimeout(() => {\n        handleSubmit({\n          preventDefault: () => {}\n        });\n      }, 50);\n    } else if (type === 'task') {\n      // Show prompt for task name\n      const taskName = prompt(\"What would you like to name this task?\", \"Work Session\");\n      if (taskName) {\n        const newText = `Schedule ${taskName} on ${formattedDate} from ${startTime} to ${endTime}`;\n        console.log(\"Setting text for task:\", newText);\n        setText(newText);\n        // Submit after React has updated the state\n        setTimeout(() => {\n          handleSubmit({\n            preventDefault: () => {}\n          });\n        }, 50);\n      }\n    }\n  }, [setText, handleSubmit]);\n\n  // Set up event listeners\n  useEffect(() => {\n    window.addEventListener('scheduleCalendarItem', handleScheduleItem);\n\n    // Add event listener for refreshCalendar event\n    const handleRefreshCalendar = () => {\n      if (showCalendar) {\n        console.log(\"Refreshing calendar events via refreshCalendar event\");\n        fetchExistingEvents();\n      }\n    };\n    window.addEventListener('refreshCalendar', handleRefreshCalendar);\n\n    // Clean up event listeners\n    return () => {\n      window.removeEventListener('scheduleCalendarItem', handleScheduleItem);\n      window.removeEventListener('refreshCalendar', handleRefreshCalendar);\n    };\n  }, [handleScheduleItem, fetchExistingEvents, showCalendar]);\n\n  // Fetch existing events when calendar is shown or date range changes\n  useEffect(() => {\n    if (showCalendar) {\n      console.log(\"Fetching existing events because calendar is shown or date range changed\");\n      fetchExistingEvents();\n    }\n  }, [showCalendar, dateRange, fetchExistingEvents]);\n\n  // Fetch all calendars and current preferences on mount\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Use Promise.all to fetch calendars and preferences in parallel\n        const [calendarsResponse, prefsResponse] = await Promise.all([axios.get('http://127.0.0.1:5000/api/get-calendars'), axios.get('http://127.0.0.1:5000/api/get-preferred-calendars')]);\n        if (!calendarsResponse.data.success) {\n          throw new Error(`Failed to fetch calendars: ${calendarsResponse.data.message || 'Unknown error'}`);\n        }\n        if (!prefsResponse.data.success) {\n          throw new Error(`Failed to fetch preferred calendars: ${prefsResponse.data.message || 'Unknown error'}`);\n        }\n        const allCalendars = calendarsResponse.data.calendars;\n        const preferredCals = prefsResponse.data.calendars;\n\n        // Update state all at once to avoid multiple re-renders\n        if (preferredCals.length > 0) {\n          // Ensure the saved preferences match the full calendar data\n          const syncedPrefs = preferredCals.map(pref => allCalendars.find(cal => cal.id === pref.id) || pref);\n          setCalendars(allCalendars);\n          setSelectedCalendars(syncedPrefs);\n        } else {\n          const primaryCal = allCalendars.find(cal => cal.primary);\n          setCalendars(allCalendars);\n          if (primaryCal) {\n            setSelectedCalendars([primaryCal]);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError(`Error loading calendars or preferences: ${error.message}`);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Send preferences to backend only when user changes them\n  useEffect(() => {\n    if (selectedCalendars.length > 0) {\n      const sendPreferences = async () => {\n        try {\n          // Debounce the API call to avoid excessive requests\n          const timeoutId = setTimeout(async () => {\n            const response = await axios.post('http://127.0.0.1:5000/api/set-preferred-calendars', {\n              calendars: selectedCalendars\n            });\n            if (!response.data.success) {\n              throw new Error(response.data.message);\n            }\n          }, 500); // Wait 500ms before sending the request\n\n          // Clear the timeout if the effect runs again before it fires\n          return () => clearTimeout(timeoutId);\n        } catch (error) {\n          console.error('Error setting preferred calendars:', error);\n          setError('Error saving calendar preferences.');\n        }\n      };\n      sendPreferences();\n    }\n  }, [selectedCalendars]);\n  const handleCalendarSelect = useCallback(cal => {\n    setSelectedCalendars(prev => {\n      // Check if we're adding or removing a calendar\n      const isRemovingCalendar = prev.some(selected => selected.id === cal.id);\n      const newCalendars = isRemovingCalendar ? prev.filter(selected => selected.id !== cal.id) : [...prev, cal];\n\n      // Clear events cache when calendars change\n      setEventsCache({});\n      return newCalendars;\n    });\n  }, [setEventsCache]);\n  const getEventSummaryFromText = text => {\n    const firstSentence = text.split('.')[0];\n    if (firstSentence.length <= 50) return firstSentence;\n    return firstSentence.substring(0, 50) + '...';\n  };\n  const handleEventClick = info => {\n    const {\n      event\n    } = info;\n\n    // Only handle suggested slots\n    if (event.extendedProps.suggestedSlot) {\n      const eventData = {\n        start: event.start.toISOString(),\n        end: event.end.toISOString()\n      };\n\n      // Toggle selection\n      setSelectedSlots(prev => {\n        const isAlreadySelected = prev.some(slot => slot.start === eventData.start && slot.end === eventData.end);\n        if (isAlreadySelected) {\n          // Remove from selection\n          return prev.filter(slot => !(slot.start === eventData.start && slot.end === eventData.end));\n        } else {\n          // Add to selection\n          return [...prev, eventData];\n        }\n      });\n\n      // Update event color based on selection\n      const isSelected = !selectedSlots.some(slot => slot.start === eventData.start && slot.end === eventData.end);\n      if (isSelected) {\n        event.setProp('backgroundColor', '#4caf50');\n        event.setProp('borderColor', '#2e7d32');\n        event.setProp('title', 'Selected Time');\n      } else {\n        event.setProp('backgroundColor', '#8bc34a');\n        event.setProp('borderColor', '#689f38');\n        event.setProp('title', 'Suggested Time');\n      }\n    } else {\n      // For existing events, show some details in a tooltip or alert\n      const eventTitle = event.title;\n      const eventTime = `${event.start.toLocaleTimeString()} - ${event.end.toLocaleTimeString()}`;\n      const calendarName = event.extendedProps.calendarName || 'Unknown Calendar';\n\n      // Simple alert for demonstration - in a real app, you might want a tooltip or modal\n      alert(`Event: ${eventTitle}\\nTime: ${eventTime}\\nCalendar: ${calendarName}`);\n    }\n  };\n  const calculateTotalHours = () => {\n    let totalMinutes = 0;\n    selectedSlots.forEach(slot => {\n      const start = new Date(slot.start);\n      const end = new Date(slot.end);\n      const diffMinutes = (end - start) / (1000 * 60);\n      totalMinutes += diffMinutes;\n    });\n    const hours = Math.floor(totalMinutes / 60);\n    const minutes = Math.floor(totalMinutes % 60);\n    return `${hours}h ${minutes}m`;\n  };\n  const handleScheduleSelected = async () => {\n    if (selectedSlots.length === 0) return;\n    setLoading(true);\n    try {\n      // Create multiple events, one for each selected slot\n      const promises = selectedSlots.map(slot => {\n        return axios.post('http://127.0.0.1:5000/api/schedule-selected-slot', {\n          selectedSlot: slot,\n          eventDetails\n        });\n      });\n      const results = await Promise.all(promises);\n      const allSuccessful = results.every(r => r.data.success);\n      if (allSuccessful) {\n        // Add success message to chat\n        setChatMessages(prev => [...prev, {\n          sender: 'bot',\n          type: 'success',\n          content: `All ${selectedSlots.length} events scheduled successfully!`\n        }]);\n        setText(\"\");\n        setShowCalendar(false);\n        setAvailableSlots([]);\n        setCalendarEvents([]);\n        setSelectedSlots([]);\n      } else {\n        // Add error message to chat\n        setChatMessages(prev => [...prev, {\n          sender: 'bot',\n          type: 'error',\n          content: `Error: Some events could not be scheduled.`\n        }]);\n      }\n    } catch (error) {\n      // Add error message to chat\n      setChatMessages(prev => {\n        var _error$response2, _error$response2$data;\n        return [...prev, {\n          sender: 'bot',\n          type: 'error',\n          content: `Error: ${((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message}`\n        }];\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleFindDifferentTimes = () => {\n    // Add message to chat\n    setChatMessages(prev => [...prev, {\n      sender: 'bot',\n      content: \"Let's find another time. Please provide more details:\"\n    }]);\n    setShowCalendar(false);\n    setAvailableSlots([]);\n    setCalendarEvents([]);\n    setSelectedSlots([]);\n  };\n  const handleDatesSet = dateInfo => {\n    console.log(\"Calendar dates changed:\", dateInfo.startStr, \"to\", dateInfo.endStr);\n    setDateRange({\n      start: dateInfo.start,\n      end: dateInfo.end\n    });\n\n    // If calendar is currently showing, fetch events for the new date range\n    if (showCalendar) {\n      console.log(\"Fetching events for new date range\");\n      fetchExistingEvents();\n    }\n  };\n\n  // Optimize to avoid recalculation on each render\n  const getAllEvents = useCallback(() => {\n    // Start with existing events\n    const allEvents = [...existingEvents];\n\n    // Add suggested slots with updated colors based on selection\n    if (calendarEvents.length > 0) {\n      calendarEvents.forEach(event => {\n        const isSelected = selectedSlots.some(slot => slot.start === event.start && slot.end === event.end);\n        allEvents.push({\n          ...event,\n          backgroundColor: isSelected ? '#4caf50' : '#8bc34a',\n          borderColor: isSelected ? '#2e7d32' : '#689f38',\n          textColor: '#ffffff',\n          title: isSelected ? 'Selected Time' : 'Suggested Time',\n          display: 'block',\n          extendedProps: {\n            ...event.extendedProps,\n            suggestedSlot: true\n          }\n        });\n      });\n    }\n    return allEvents;\n  }, [existingEvents, calendarEvents, selectedSlots]);\n\n  // Precalculate events to avoid useMemo in render\n  const currentEvents = getAllEvents();\n\n  // Render calendar in a chat message\n  const renderCalendarMessage = () => {\n    if (!showCalendar) return null;\n    const currentEvents = getAllEvents();\n    return /*#__PURE__*/_jsxDEV(ChatMessage, {\n      sender: \"bot\",\n      isCalendarView: true,\n      className: \"calendar-message\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-view w-full\",\n        children: [selectedSlots.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-blue-50 border border-blue-100 rounded-lg p-4 mb-4 text-blue-800 font-medium\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Selected \", selectedSlots.length, \" slot(s) - Total time: \", calculateTotalHours()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 820,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 819,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-legend\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"legend-color suggested-event-color\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 827,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Suggested Work Slots\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 828,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 826,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"legend-color selected-event-color\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 831,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Selected Work Slots\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 832,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 830,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 825,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-title\",\n              children: \"Your Calendars:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 838,\n              columnNumber: 15\n            }, this), selectedCalendars.map(cal => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"legend-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"legend-color\",\n                style: {\n                  backgroundColor: cal.backgroundColor || getCalendarColor(cal.id),\n                  border: `1px solid ${cal.borderColor || getCalendarColor(cal.id, true)}`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 841,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: cal.summary\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 848,\n                columnNumber: 19\n              }, this)]\n            }, cal.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 840,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 837,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CalendarComponent, {\n          events: currentEvents,\n          handleEventClick: handleEventClick,\n          handleDatesSet: handleDatesSet,\n          loading: loading || fetchingEvents,\n          renderEventContent: renderEventContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 855,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex mt-6 space-x-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleScheduleSelected,\n            disabled: selectedSlots.length === 0 || loading,\n            className: `\n                px-6 py-3 rounded-lg font-medium flex items-center justify-center\n                ${selectedSlots.length === 0 || loading ? 'bg-gray-300 cursor-not-allowed text-gray-500' : 'bg-green-600 hover:bg-green-700 text-white shadow-md hover:shadow-lg transition-all duration-200'}\n              `,\n            children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                className: \"animate-spin -ml-1 mr-2 h-5 w-5\",\n                xmlns: \"http://www.w3.org/2000/svg\",\n                fill: \"none\",\n                viewBox: \"0 0 24 24\",\n                children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                  className: \"opacity-25\",\n                  cx: \"12\",\n                  cy: \"12\",\n                  r: \"10\",\n                  stroke: \"currentColor\",\n                  strokeWidth: \"4\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 877,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                  className: \"opacity-75\",\n                  fill: \"currentColor\",\n                  d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 878,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 876,\n                columnNumber: 19\n              }, this), \"Scheduling...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 875,\n              columnNumber: 17\n            }, this) : `Schedule ${selectedSlots.length} Selected Time${selectedSlots.length === 1 ? '' : 's'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 864,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleFindDifferentTimes,\n            disabled: loading,\n            className: \"px-6 py-3 bg-red-500 hover:bg-red-600 text-white rounded-lg font-medium shadow-md hover:shadow-lg transition-all duration-200\",\n            children: \"Find Different Times\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 884,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 863,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 817,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 816,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Format events in a user-friendly way\n  const formatStyledEventList = responseText => {\n    console.log(\"Formatting response:\", responseText); // Debug to see what's being processed\n\n    // First, check for specific format with Cmpt 310 or other course names\n    if (responseText.includes(\"Cmpt 310\") || responseText.includes(\"CMPT 310\")) {\n      try {\n        // Extract date more flexibly\n        let dateMatch = responseText.match(/for\\s+([A-Za-z]+\\s+\\d+(?:st|nd|rd|th)?,\\s+\\d{4})/i);\n        const dateStr = dateMatch ? dateMatch[1] : \"Today\";\n\n        // Simpler regex to match formatted times and course info\n        const eventPattern = /\\*\\*([^*]+)\\*\\*:\\s*([^*\\n]+?)(?:\\sin\\s+([^*\\n]*))?(?=\\s*\\*\\*|\\s*$)/g;\n        let match;\n        const events = [];\n        while ((match = eventPattern.exec(responseText)) !== null) {\n          console.log(\"Matched event:\", match); // Debug\n          const timeRange = match[1].trim();\n          const title = match[2].trim();\n          const location = match[3] ? match[3].trim() : '';\n          events.push({\n            timeRange,\n            title,\n            location,\n            duration: calculateDuration(timeRange)\n          });\n        }\n\n        // If we couldn't extract events with the regex, try a direct approach for the specific format\n        if (events.length === 0 && responseText.includes(\"AM\") && responseText.includes(\"PM\")) {\n          // Direct parsing for the specific format in the image\n          const timeMatch = responseText.match(/(\\d+:\\d+\\s*(?:AM|PM)\\s*-\\s*\\d+:\\d+\\s*(?:AM|PM))/i);\n          const courseMatch = responseText.match(/Cmpt\\s+\\d+|CMPT\\s+\\d+/i);\n          const locationMatch = responseText.match(/at\\s+([A-Z]+\\s+\\d+)/i);\n          if (timeMatch && courseMatch) {\n            events.push({\n              timeRange: timeMatch[1].trim(),\n              title: courseMatch[0].trim() + (responseText.includes(\"OH\") ? \" Office Hours\" : \"\"),\n              location: locationMatch ? locationMatch[1].trim() : \"\",\n              duration: calculateDuration(timeMatch[1].trim())\n            });\n            console.log(\"Direct parse event:\", events[0]); // Debug\n          }\n        }\n\n        // If we extracted events, format them nicely\n        if (events.length > 0) {\n          // Generate intro text\n          const introMatch = responseText.match(/^([^*]+)/);\n          const introText = introMatch ? introMatch[0].trim() : `Here's your schedule for ${dateStr}:`;\n          return generateEventHTML(introText, dateStr, events);\n        }\n      } catch (error) {\n        console.error(\"Error formatting events:\", error);\n      }\n    }\n\n    // Check if this is a schedule/calendar response with events\n    if ((responseText.includes(\"schedule\") || responseText.includes(\"calendar\") || responseText.includes(\"looks like for\") || responseText.includes(\"have\") || responseText.includes(\"Monday\") || responseText.includes(\"monday\")) && (responseText.includes(\"**\") || responseText.includes(\"AM\") || responseText.includes(\"PM\"))) {\n      try {\n        // Extract date\n        let dateMatch = responseText.match(/(?:for|on)\\s+([A-Za-z]+\\s+\\d+(?:st|nd|rd|th)?,\\s+\\d{4})/i);\n        const dateStr = dateMatch ? dateMatch[1] : responseText.toLowerCase().includes(\"monday\") ? \"Monday\" : \"Today\";\n\n        // Parse events from the text - improved regex pattern to better capture events\n        const eventPattern = /\\*\\*([0-9:.APM\\s-]+)\\*\\*:\\s*([^*\\n]+?)(?:\\sin\\s+([^*\\n]*))?(?=\\s*\\*\\*|\\s*$)/g;\n        let match;\n        const events = [];\n        while ((match = eventPattern.exec(responseText)) !== null) {\n          const timeRange = match[1].trim();\n          const title = match[2].trim();\n          const location = match[3] ? match[3].trim() : '';\n          events.push({\n            timeRange,\n            title,\n            location,\n            duration: calculateDuration(timeRange)\n          });\n        }\n\n        // Try alternative pattern if no events found\n        if (events.length === 0) {\n          const altPattern = /(\\d+(?::\\d+)?\\s*(?:AM|PM)\\s*-\\s*\\d+(?::\\d+)?\\s*(?:AM|PM))[\\s:]*([^()\\n,]+)(?:\\s+in\\s+([^()\\n,]+))?/gi;\n          while ((match = altPattern.exec(responseText)) !== null) {\n            events.push({\n              timeRange: match[1].trim(),\n              title: match[2].trim(),\n              location: match[3] ? match[3].trim() : '',\n              duration: calculateDuration(match[1].trim())\n            });\n          }\n        }\n\n        // If we extracted events, format them nicely\n        if (events.length > 0) {\n          // Generate intro text\n          const introMatch = responseText.match(/^([^*]+)/);\n          const introText = introMatch ? introMatch[0].trim() : `Here's your schedule for ${dateStr}:`;\n          return generateEventHTML(introText, dateStr, events);\n        } else {\n          // If we still couldn't find events, fall back to default formatting\n          return defaultStyledFormat(responseText);\n        }\n      } catch (error) {\n        console.error(\"Error formatting events:\", error);\n        return defaultStyledFormat(responseText);\n      }\n    }\n\n    // For regular text responses, make them more visually interesting\n    if (!responseText.includes(\"<div\") && !responseText.includes(\"<p\") && !responseText.includes(\"<ul\")) {\n      // If it mentions free time, use a special format\n      if (responseText.toLowerCase().includes(\"free time\") || responseText.toLowerCase().includes(\"available\") || responseText.toLowerCase().includes(\"time slot\")) {\n        return generateFreeTimeHTML(responseText);\n      }\n\n      // If it's a confirmation or completion message\n      if (responseText.toLowerCase().includes(\"scheduled\") || responseText.toLowerCase().includes(\"created\") || responseText.toLowerCase().includes(\"added\")) {\n        return generateConfirmationHTML(responseText);\n      }\n\n      // Default enhanced format for other responses\n      return defaultStyledFormat(responseText);\n    }\n\n    // Return original if no formatting applied\n    return responseText;\n  };\n\n  // Helper function to calculate duration from a time range\n  const calculateDuration = timeRange => {\n    if (!timeRange || !timeRange.includes(\"-\")) return \"\";\n    try {\n      const [startTime, endTime] = timeRange.split(\"-\").map(t => t.trim());\n      const parseTime = timeStr => {\n        const [time, modifier] = timeStr.split(/\\s+/);\n        let [hours, minutes] = (time || \"\").split(':').map(Number);\n        minutes = minutes || 0;\n        if (modifier && modifier.toUpperCase() === 'PM' && hours < 12) hours += 12;\n        if (modifier && modifier.toUpperCase() === 'AM' && hours === 12) hours = 0;\n        return hours * 60 + minutes;\n      };\n      const startMinutes = parseTime(startTime);\n      const endMinutes = parseTime(endTime);\n      const durationMinutes = endMinutes - startMinutes;\n      if (durationMinutes > 0) {\n        const hours = Math.floor(durationMinutes / 60);\n        const mins = durationMinutes % 60;\n        return hours > 0 ? `${hours} hour${hours > 1 ? 's' : ''}${mins > 0 ? ` ${mins} min` : ''}` : `${mins} min`;\n      }\n      return \"\";\n    } catch (e) {\n      console.error(\"Error calculating duration:\", e);\n      return \"\";\n    }\n  };\n\n  // Helper function to generate HTML for events\n  const generateEventHTML = (introText, dateStr, events) => {\n    return `\n      <div>\n        <p>${introText}</p>\n        <div class=\"styled-event-list\">\n          <div class=\"event-date\">${dateStr}</div>\n          ${events.map(event => {\n      // Determine background color based on event title (for courses)\n      let bgColor = '#e5edff'; // default blue background\n      let iconColor = '#3b82f6'; // default blue icon\n\n      if (event.title.includes('CMPT 310') || event.title.includes('Cmpt 310')) {\n        bgColor = '#f3e8ff'; // purple for CMPT 310\n        iconColor = '#8b5cf6';\n      } else if (event.title.includes('CMPT 213') || event.title.includes('Cmpt 213')) {\n        bgColor = '#e0f2fe'; // light blue for CMPT 213\n        iconColor = '#0ea5e9';\n      } else if (event.title.includes('CMPT 276') || event.title.includes('Cmpt 276')) {\n        bgColor = '#dcfce7'; // green for CMPT 276\n        iconColor = '#22c55e';\n      } else if (event.title.includes('CMPT 105W') || event.title.includes('Cmpt 105W')) {\n        bgColor = '#ffedd5'; // orange for CMPT 105W\n        iconColor = '#f97316';\n      } else if (event.title.includes('OH') || event.title.includes('Office Hours')) {\n        bgColor = '#ffe4e6'; // pink for Office Hours\n        iconColor = '#e11d48';\n      }\n      return `\n            <div class=\"event-item\">\n              <div class=\"event-item-icon\" style=\"background-color: ${bgColor}; color: ${iconColor};\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n                  <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\n                  <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\n                  <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\n                </svg>\n              </div>\n              <div>\n                <div class=\"event-time\">${event.timeRange}</div>\n                <div class=\"event-content\">\n                  <div class=\"event-title\">${event.title}</div>\n                  ${event.location ? `\n                    <div class=\"event-location\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                        <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\"></path>\n                        <circle cx=\"12\" cy=\"10\" r=\"3\"></circle>\n                      </svg>\n                      ${event.location}\n                    </div>\n                  ` : ''}\n                  ${event.duration ? `<div class=\"event-duration\">${event.duration}</div>` : ''}\n                </div>\n              </div>\n            </div>\n            `;\n    }).join('')}\n        </div>\n      </div>\n    `;\n  };\n\n  // Helper function for free time format\n  const generateFreeTimeHTML = responseText => {\n    return `\n      <div class=\"styled-event-list\">\n        <div class=\"event-item\">\n          <div class=\"event-item-icon\" style=\"background-color: #ebf7ee; color: #34d399;\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n              <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\n              <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\n            </svg>\n          </div>\n          <div class=\"event-content\">\n            <p>${responseText}</p>\n          </div>\n        </div>\n      </div>\n    `;\n  };\n\n  // Helper function for confirmation format\n  const generateConfirmationHTML = responseText => {\n    return `\n      <div class=\"styled-event-list\">\n        <div class=\"event-item\">\n          <div class=\"event-item-icon\" style=\"background-color: #e5edff; color: #3b82f6;\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n              <polyline points=\"20 6 9 17 4 12\"></polyline>\n            </svg>\n          </div>\n          <div class=\"event-content\">\n            <p>${responseText}</p>\n          </div>\n        </div>\n      </div>\n    `;\n  };\n\n  // Helper function for default format\n  const defaultStyledFormat = responseText => {\n    return `\n      <div class=\"styled-event-list\">\n        <div class=\"event-item\">\n          <div class=\"event-item-icon\" style=\"background-color: #f5f3ff; color: #8b5cf6;\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n              <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n              <line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"></line>\n              <line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"></line>\n            </svg>\n          </div>\n          <div class=\"event-content\">\n            <p>${responseText}</p>\n          </div>\n        </div>\n      </div>\n    `;\n  };\n\n  // Render message content based on type\n  const renderMessage = (message, index) => {\n    if (message.type === 'welcome') {\n      return /*#__PURE__*/_jsxDEV(WelcomeMessage, {}, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1198,\n        columnNumber: 14\n      }, this);\n    }\n    if (message.type === 'error') {\n      return /*#__PURE__*/_jsxDEV(ChatMessage, {\n        sender: message.sender,\n        content: `<div class=\"error-content\">${message.content}</div>`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1203,\n        columnNumber: 9\n      }, this);\n    }\n    if (message.type === 'success') {\n      return /*#__PURE__*/_jsxDEV(ChatMessage, {\n        sender: message.sender,\n        content: `<div class=\"success-content\">${message.content}</div>`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1213,\n        columnNumber: 9\n      }, this);\n    }\n\n    // Format event lists in responses\n    const formattedContent = message.sender === 'bot' ? formatStyledEventList(message.content) : message.content;\n    return /*#__PURE__*/_jsxDEV(ChatMessage, {\n      sender: message.sender,\n      content: formattedContent\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1227,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full h-full\",\n    children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative\",\n        children: [/*#__PURE__*/_jsxDEV(ChatHeader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SettingsButton, {\n          onClick: () => setShowSettings(!showSettings),\n          isOpen: showSettings\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1240,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `settings-transition ${showSettings ? 'settings-open' : 'settings-closed'}`,\n        children: showSettings && /*#__PURE__*/_jsxDEV(CalendarSettings, {\n          calendars: calendars,\n          selected: selectedCalendars,\n          onSelect: handleCalendarSelect,\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1248,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatMessages, {\n        children: [chatMessages.map((msg, idx) => renderMessage(msg, idx)), showCalendar && renderCalendarMessage()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n        value: text,\n        onChange: e => setText(e.target.value),\n        onSubmit: handleSubmit,\n        loading: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1237,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1236,\n    columnNumber: 5\n  }, this);\n}\n_s(NaturalLanguageForm, \"F3o0miN3WFVWWxmkVrtmKCZPIFw=\");\n_c3 = NaturalLanguageForm;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App w-full min-h-screen bg-gray-50 py-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto px-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold mb-6 text-center text-gray-800\",\n        children: \"ScheduleSync Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n        fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center p-10\",\n          children: \"Loading application...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1278,\n          columnNumber: 29\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(NaturalLanguageForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1279,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1278,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1276,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"script\", {\n      dangerouslySetInnerHTML: {\n        __html: `\n          // Directly define functions in the global scope\n          window.scheduleBreak = function(startTime, endTime) {\n            console.log(\"DOM scheduleBreak called with:\", startTime, endTime);\n            if (window.dispatchEvent) {\n              window.dispatchEvent(\n                new CustomEvent('scheduleCalendarItem', {\n                  detail: {\n                    type: 'break',\n                    startTime,\n                    endTime\n                  }\n                })\n              );\n            }\n          };\n          \n          window.scheduleTask = function(startTime, endTime) {\n            console.log(\"DOM scheduleTask called with:\", startTime, endTime);\n            if (window.dispatchEvent) {\n              window.dispatchEvent(\n                new CustomEvent('scheduleCalendarItem', {\n                  detail: {\n                    type: 'task',\n                    startTime,\n                    endTime\n                  }\n                })\n              );\n            }\n          };\n          \n          // Duration selector functions\n          window.showDurationSelector = function(startTime, endTime, selectorId, displayId, sliderId) {\n            console.log(\"Showing duration selector\", selectorId);\n            const durationSelector = document.getElementById(selectorId);\n            if (durationSelector) {\n              durationSelector.style.display = 'block';\n            } else {\n              console.error(\"Duration selector element not found:\", selectorId);\n            }\n          };\n          \n          window.updateDurationDisplay = function(minutes, displayId) {\n            console.log(\"Updating duration display to\", minutes, \"for\", displayId);\n            const durationDisplay = document.getElementById(displayId);\n            if (!durationDisplay) {\n              console.error(\"Duration display element not found:\", displayId);\n              return;\n            }\n            \n            let display = \"\";\n            if (minutes >= 60) {\n              const hours = Math.floor(minutes / 60);\n              const remainingMinutes = minutes % 60;\n              display = hours + \" hour\" + (hours > 1 ? \"s\" : \"\");\n              if (remainingMinutes > 0) {\n                display += \" \" + remainingMinutes + \" min\";\n              }\n            } else {\n              display = minutes + \" min\";\n            }\n            durationDisplay.textContent = display;\n          };\n          \n          window.scheduleBreakWithDuration = function(startTime, endTime, sliderId) {\n            console.log(\"Scheduling break with duration using slider\", sliderId);\n            const durationSlider = document.getElementById(sliderId);\n            if (!durationSlider) {\n              console.error(\"Duration slider not found:\", sliderId);\n              return;\n            }\n            \n            const durationMinutes = durationSlider.value;\n            console.log(\"Duration selected:\", durationMinutes);\n            \n            const startDateTime = new Date();\n            const [startHours, startMinutes] = startTime.split(':').map(Number);\n            startDateTime.setHours(startHours, startMinutes, 0);\n            \n            // Calculate end time based on selected duration\n            const endDateTime = new Date(startDateTime);\n            endDateTime.setMinutes(startDateTime.getMinutes() + parseInt(durationMinutes));\n            \n            const formattedEndTime = endDateTime.getHours().toString().padStart(2, '0') + ':' + \n                                  endDateTime.getMinutes().toString().padStart(2, '0');\n            \n            console.log(\"Calculated end time:\", formattedEndTime);\n            \n            // Call the existing scheduleBreak function\n            window.scheduleBreak(startTime, formattedEndTime);\n          };\n          \n          window.cancelDurationSelection = function(selectorId) {\n            console.log(\"Canceling duration selection for\", selectorId);\n            const durationSelector = document.getElementById(selectorId);\n            if (durationSelector) {\n              durationSelector.style.display = 'none';\n            } else {\n              console.error(\"Duration selector element not found:\", selectorId);\n            }\n          };\n          \n          console.log(\"Inline scheduling functions defined and attached to window object\");\n        `\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1283,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1275,\n    columnNumber: 5\n  }, this);\n}\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"CalendarComponent$memo\");\n$RefreshReg$(_c2, \"CalendarComponent\");\n$RefreshReg$(_c3, \"NaturalLanguageForm\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","memo","useMemo","Suspense","lazy","axios","ChatHeader","ChatContainer","ChatMessages","ChatMessage","ChatInput","SettingsButton","CalendarSettings","WelcomeMessage","CalendarSelectionComponent","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","jsxDEV","_jsxDEV","setupGlobalFunctions","window","scheduleBreak","startTime","endTime","console","log","dispatchEvent","CustomEvent","detail","type","scheduleTask","renderEventContent","eventInfo","_eventInfo$event$exte","_eventInfo$event$exte2","_eventInfo$event$exte3","_eventInfo$event$exte4","isSuggested","event","extendedProps","suggestedSlot","isExisting","existingEvent","timeText","includes","times","split","trim","calendarName","title","summary","className","children","fileName","_jsxFileName","lineNumber","columnNumber","CalendarComponent","_c","events","handleEventClick","handleDatesSet","loading","plugins","initialView","headerToolbar","left","center","right","eventClick","eventContent","height","nowIndicator","datesSet","slotMinTime","slotMaxTime","eventTimeFormat","hour","minute","meridiem","slotLabelFormat","hour12","allDaySlot","eventDisplay","eventBackgroundColor","eventBorderColor","eventTextColor","displayEventTime","displayEventEnd","forceEventDuration","eventMinHeight","lazyFetching","_c2","displayName","NaturalLanguageForm","_s","text","setText","setLoading","message","setMessage","error","setError","availableSlots","setAvailableSlots","calendarEvents","setCalendarEvents","existingEvents","setExistingEvents","showCalendar","setShowCalendar","eventDetails","setEventDetails","selectedSlots","setSelectedSlots","eventsCache","setEventsCache","fetchingEvents","setFetchingEvents","chatMessages","setChatMessages","showSettings","setShowSettings","sender","calendars","setCalendars","selectedCalendars","setSelectedCalendars","dateRange","setDateRange","start","Date","end","setDate","getDate","formatDate","date","d","month","getMonth","day","year","getFullYear","length","join","getCalendarColor","calendarId","darker","calendar","find","cal","id","backgroundColor","color","startsWith","rgbaPattern","match","darkenColor","amount","rgbPattern","r","parseInt","g","b","Math","max","floor","replace","substring","toString","padStart","e","fetchExistingEvents","forceRefresh","startDate","endDate","process","env","NODE_ENV","calendarIds","map","cacheKey","expiry","now","data","retries","maxRetries","response","get","err","currentRetry","Promise","resolve","setTimeout","pow","success","tomorrow","toISOString","eventsWithMetadata","borderColor","textColor","classNames","prev","handleSubmit","preventDefault","content","post","humanizedResponse","intent","insufficientTime","calendar_title","getEventSummaryFromText","description","predicted_calendar","eventLink","_error$response","_error$response$data","handleScheduleItem","formattedDate","toLocaleDateString","newText","taskName","prompt","addEventListener","handleRefreshCalendar","removeEventListener","fetchData","calendarsResponse","prefsResponse","all","Error","allCalendars","preferredCals","syncedPrefs","pref","primaryCal","primary","sendPreferences","timeoutId","clearTimeout","handleCalendarSelect","isRemovingCalendar","some","selected","newCalendars","filter","firstSentence","info","eventData","isAlreadySelected","slot","isSelected","setProp","eventTitle","eventTime","toLocaleTimeString","alert","calculateTotalHours","totalMinutes","forEach","diffMinutes","hours","minutes","handleScheduleSelected","promises","selectedSlot","results","allSuccessful","every","_error$response2","_error$response2$data","handleFindDifferentTimes","dateInfo","startStr","endStr","getAllEvents","allEvents","push","display","currentEvents","renderCalendarMessage","isCalendarView","style","border","onClick","disabled","xmlns","fill","viewBox","cx","cy","stroke","strokeWidth","formatStyledEventList","responseText","dateMatch","dateStr","eventPattern","exec","timeRange","location","duration","calculateDuration","timeMatch","courseMatch","locationMatch","introMatch","introText","generateEventHTML","toLowerCase","altPattern","defaultStyledFormat","generateFreeTimeHTML","generateConfirmationHTML","t","parseTime","timeStr","time","modifier","Number","toUpperCase","startMinutes","endMinutes","durationMinutes","mins","bgColor","iconColor","renderMessage","index","formattedContent","isOpen","onSelect","msg","idx","value","onChange","target","onSubmit","_c3","App","fallback","dangerouslySetInnerHTML","__html","_c4","$RefreshReg$"],"sources":["/Users/Rushik/Documents/Projects/caledar-example/Calendar-app-latest-working/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, memo, useMemo, Suspense, lazy } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\n// Import our Chat UI components instead of the old NewUI\nimport { ChatHeader, ChatContainer, ChatMessages, ChatMessage, ChatInput, SettingsButton, CalendarSettings, WelcomeMessage, CalendarSelectionComponent } from './ChatUI';\n\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\n\n// Define the script at global level to ensure the functions are globally accessible\nconst setupGlobalFunctions = () => {\n  if (typeof window !== 'undefined') {\n    // Create a custom event for scheduling breaks\n    window.scheduleBreak = (startTime, endTime) => {\n      console.log(\"scheduleBreak called with:\", startTime, endTime);\n      // Dispatch a custom event that the React component can listen for\n      window.dispatchEvent(\n        new CustomEvent('scheduleCalendarItem', {\n          detail: {\n            type: 'break',\n            startTime,\n            endTime\n          }\n        })\n      );\n    };\n    \n    // Create a custom event for scheduling tasks  \n    window.scheduleTask = (startTime, endTime) => {\n      console.log(\"scheduleTask called with:\", startTime, endTime);\n      window.dispatchEvent(\n        new CustomEvent('scheduleCalendarItem', {\n          detail: {\n            type: 'task',\n            startTime,\n            endTime\n          }\n        })\n      );\n    };\n    \n    // Log to verify functions are attached\n    console.log(\"Global scheduling functions attached:\", \n      typeof window.scheduleBreak === 'function', \n      typeof window.scheduleTask === 'function');\n  }\n};\n\n// Memoize the renderEventContent function to avoid recreating it on each render\nconst renderEventContent = (eventInfo) => {\n  // Determine if this is a suggested slot or existing event\n  const isSuggested = eventInfo.event.extendedProps?.suggestedSlot === true;\n  const isExisting = eventInfo.event.extendedProps?.existingEvent === true;\n  \n  // Format the time more cleanly\n  let timeText = eventInfo.timeText || '';\n  if (timeText.includes('-')) {\n    // Simplify time range display\n    const times = timeText.split('-');\n    timeText = times[0].trim() + ' - ' + times[1].trim();\n  }\n  \n  // Get the calendar name if available\n  let calendarName = '';\n  if (isExisting && eventInfo.event.extendedProps?.calendarName) {\n    calendarName = `(${eventInfo.event.extendedProps.calendarName})`;\n  }\n  \n  // Get the event title with fallback options\n  const title = eventInfo.event.title || \n                eventInfo.event.extendedProps?.summary || \n                (isSuggested ? 'Suggested Time' : 'Event');\n  \n  return (\n    <div className={`event-content ${isSuggested ? 'suggested-event' : 'existing-event'}`}>\n      <b>{timeText}</b>\n      <i>{title} {calendarName}</i>\n    </div>\n  );\n};\n\n// Define the Calendar component outside of the main component\nconst CalendarComponent = memo(({ \n  events, \n  handleEventClick, \n  handleDatesSet, \n  loading,\n  renderEventContent \n}) => {\n  return (\n    <div className={`calendar-container ${loading ? 'loading' : ''}`}>\n      <FullCalendar\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n        initialView=\"timeGridWeek\"\n        headerToolbar={{\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay'\n        }}\n        events={events}\n        eventClick={handleEventClick}\n        eventContent={renderEventContent}\n        height=\"800px\"\n        nowIndicator={true}\n        datesSet={handleDatesSet}\n        slotMinTime=\"07:00:00\"\n        slotMaxTime=\"23:00:00\"\n        eventTimeFormat={{\n          hour: 'numeric',\n          minute: '2-digit',\n          meridiem: 'short'\n        }}\n        slotLabelFormat={{\n          hour: 'numeric',\n          minute: '2-digit',\n          hour12: true\n        }}\n        allDaySlot={false}\n        eventDisplay=\"block\"\n        eventBackgroundColor=\"#4285f4\"\n        eventBorderColor=\"#3b78e7\"\n        eventTextColor=\"#ffffff\"\n        displayEventTime={true}\n        displayEventEnd={true}\n        forceEventDuration={true}\n        eventMinHeight={30}\n        lazyFetching={true}\n      />\n    </div>\n  );\n});\n\nCalendarComponent.displayName = 'CalendarComponent';\n\n// Note: We're using CalendarSelectionComponent from ChatUI.jsx\n\nfunction NaturalLanguageForm() {\n  const [text, setText] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  // eslint-disable-next-line no-unused-vars\n  const [availableSlots, setAvailableSlots] = useState([]);\n  const [calendarEvents, setCalendarEvents] = useState([]);\n  const [existingEvents, setExistingEvents] = useState([]);\n  const [showCalendar, setShowCalendar] = useState(false);\n  const [eventDetails, setEventDetails] = useState({});\n  const [selectedSlots, setSelectedSlots] = useState([]);\n  // Add cache for events data\n  const [eventsCache, setEventsCache] = useState({});\n  const [fetchingEvents, setFetchingEvents] = useState(false);\n  \n  // Chat-specific state\n  const [chatMessages, setChatMessages] = useState([]);\n  const [showSettings, setShowSettings] = useState(false);\n  \n  // Call the setup function on load\n  useEffect(() => {\n    setupGlobalFunctions();\n    // Add welcome message\n    setChatMessages([{ sender: 'bot', type: 'welcome' }]);\n  }, []);\n  \n  const [calendars, setCalendars] = useState([]);\n  const [selectedCalendars, setSelectedCalendars] = useState([]);\n  const [dateRange, setDateRange] = useState({\n    start: new Date(),\n    end: new Date(new Date().setDate(new Date().getDate() + 7))\n  });\n\n  // Helper function to format date to YYYY-MM-DD\n  const formatDate = (date) => {\n    const d = new Date(date);\n    let month = '' + (d.getMonth() + 1);\n    let day = '' + d.getDate();\n    const year = d.getFullYear();\n\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n\n    return [year, month, day].join('-');\n  };\n\n  // Helper function to get color for a specific calendar\n  const getCalendarColor = (calendarId, darker = false) => {\n    // Find the calendar in our list\n    const calendar = calendars.find(cal => cal.id === calendarId);\n    if (calendar && calendar.backgroundColor) {\n      // Enhance color vibrancy by ensuring full opacity\n      let color = calendar.backgroundColor;\n      \n      // If it's an RGBA color, convert to fully opaque\n      if (color.startsWith('rgba')) {\n        const rgbaPattern = /rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*[\\d.]+\\s*\\)/;\n        const match = color.match(rgbaPattern);\n        if (match) {\n          color = `rgb(${match[1]}, ${match[2]}, ${match[3]})`;\n        }\n      }\n      \n      if (darker) {\n        // Create a slightly darker version for the border\n        return darkenColor(color, 0.2);\n      }\n      return color;\n    }\n    // Default color if calendar not found - using a more vibrant blue\n    return darker ? '#1565C0' : '#1E88E5';\n  };\n\n  // Helper function to darken a color\n  const darkenColor = (color, amount) => {\n    try {\n      // Handle RGB format\n      if (color.startsWith('rgb')) {\n        const rgbPattern = /rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/;\n        const match = color.match(rgbPattern);\n        if (match) {\n          let r = parseInt(match[1], 10);\n          let g = parseInt(match[2], 10);\n          let b = parseInt(match[3], 10);\n          \n          r = Math.max(0, Math.floor(r * (1 - amount)));\n          g = Math.max(0, Math.floor(g * (1 - amount)));\n          b = Math.max(0, Math.floor(b * (1 - amount)));\n          \n          return `rgb(${r}, ${g}, ${b})`;\n        }\n      }\n      \n      // Remove the hash if it exists for hex colors\n      color = color.replace('#', '');\n      \n      // Parse the color\n      let r = parseInt(color.substring(0, 2), 16);\n      let g = parseInt(color.substring(2, 4), 16);\n      let b = parseInt(color.substring(4, 6), 16);\n      \n      // Darken the color\n      r = Math.max(0, Math.floor(r * (1 - amount)));\n      g = Math.max(0, Math.floor(g * (1 - amount)));\n      b = Math.max(0, Math.floor(b * (1 - amount)));\n      \n      // Convert back to hex\n      return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n    } catch (e) {\n      console.error('Error darkening color:', e);\n      return color; // Return original color if there's an error\n    }\n  };\n\n  // Define fetchExistingEvents before it's used in the event listener\n  const fetchExistingEvents = useCallback(async (forceRefresh = false) => {\n    // Prevent multiple simultaneous requests\n    if (fetchingEvents) return;\n    \n    try {\n      setFetchingEvents(true);\n      const startDate = formatDate(dateRange.start);\n      const endDate = formatDate(dateRange.end);\n      \n      // Skip logging in production\n      if (process.env.NODE_ENV !== 'production') {\n        console.log(\"Fetching events from:\", startDate, \"to\", endDate);\n      }\n      \n      // Create the calendar IDs parameter\n      const calendarIds = selectedCalendars.map(cal => cal.id).join(',');\n      \n      // Create a cache key based on date range and selected calendars\n      const cacheKey = `${startDate}_${endDate}_${calendarIds}`;\n      \n      // Check if we have cached data and not forcing refresh\n      if (!forceRefresh && eventsCache[cacheKey] && eventsCache[cacheKey].expiry > Date.now()) {\n        setExistingEvents(eventsCache[cacheKey].data);\n        setFetchingEvents(false);\n        return;\n      }\n      \n      // Add retry logic\n      let retries = 0;\n      const maxRetries = 3;\n      let response;\n      \n      while (retries < maxRetries) {\n        try {\n          response = await axios.get(\n            `http://127.0.0.1:5000/api/get-events?start=${startDate}&end=${endDate}&calendars=${calendarIds}`\n          );\n          break; // Success, exit retry loop\n        } catch (err) {\n          const currentRetry = retries; // Capture current value to avoid the loop reference issue\n          retries++;\n          if (currentRetry === maxRetries - 1) throw err;\n          // Wait before retrying (exponential backoff)\n          await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, currentRetry + 1)));\n        }\n      }\n      \n      if (response.data.success) {\n        // Check if there are any events in the response\n        let events = response.data.events || [];\n        \n        // If no events are returned and we're in development mode, add some mock events for testing\n        if (events.length === 0 && process.env.NODE_ENV === 'development') {\n          console.log(\"No events returned from API, adding mock events for testing\");\n          // Create a few mock events for the current week\n          const now = new Date();\n          const tomorrow = new Date(now);\n          tomorrow.setDate(tomorrow.getDate() + 1);\n          \n          events = [\n            {\n              id: 'mock-1',\n              title: 'Team Meeting',\n              start: new Date(now.getFullYear(), now.getMonth(), now.getDate(), 10, 0).toISOString(),\n              end: new Date(now.getFullYear(), now.getMonth(), now.getDate(), 11, 0).toISOString(),\n              calendarId: 'primary',\n              calendarName: 'Primary Calendar'\n            },\n            {\n              id: 'mock-2',\n              title: 'Lunch Break',\n              start: new Date(now.getFullYear(), now.getMonth(), now.getDate(), 12, 0).toISOString(),\n              end: new Date(now.getFullYear(), now.getMonth(), now.getDate(), 13, 0).toISOString(),\n              calendarId: 'primary',\n              calendarName: 'Primary Calendar'\n            },\n            {\n              id: 'mock-3',\n              title: 'Project Review',\n              start: new Date(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 14, 0).toISOString(),\n              end: new Date(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 15, 30).toISOString(),\n              calendarId: 'work',\n              calendarName: 'Work Calendar'\n            }\n          ];\n        }\n        \n        if (events.length > 0) {\n          // Process all events at once with minimal logging\n          const eventsWithMetadata = events.map(event => ({\n            ...event,\n            title: event.title || event.summary || \"Untitled Event\",\n            existingEvent: true,\n            backgroundColor: event.backgroundColor || getCalendarColor(event.calendarId),\n            borderColor: event.borderColor || getCalendarColor(event.calendarId, true),\n            textColor: event.textColor || '#ffffff',\n            classNames: ['calendar-event']  // Add a class for additional styling\n          }));\n          \n          // Update the cache with a 5-minute expiration\n          setEventsCache(prev => ({\n            ...prev,\n            [cacheKey]: {\n              data: eventsWithMetadata,\n              expiry: Date.now() + 5 * 60 * 1000 // 5 minutes\n            }\n          }));\n          \n          setExistingEvents(eventsWithMetadata);\n        } else {\n          setExistingEvents([]);\n        }\n      } else {\n        console.error('Error fetching events:', response.data.message);\n      }\n    } catch (error) {\n      console.error('Error fetching events:', error);\n      setError('Failed to load events. Please try again.');\n    } finally {\n      setFetchingEvents(false);\n    }\n  }, [dateRange, formatDate, getCalendarColor, selectedCalendars, eventsCache, fetchingEvents, setError]);\n\n  // Define handleSubmit with useCallback before it's used in handleScheduleItem\n  const handleSubmit = useCallback(async (e) => {\n    e.preventDefault();\n    console.log(\"handleSubmit called with text:\", text);\n    if (!text.trim()) return;\n\n    // Add user message to chat\n    setChatMessages(prev => [...prev, { sender: 'user', content: text }]);\n    \n    setLoading(true);\n    setError(\"\");\n    setMessage(\"\");\n    setAvailableSlots([]);\n    setCalendarEvents([]);\n    setSelectedSlots([]);\n\n    try {\n      console.log(\"Making API call with text:\", text);\n      const response = await axios.post('http://127.0.0.1:5000/api/natural-language-event', {\n        text\n      });\n      console.log(\"API response:\", response.data);\n\n      if (response.data.success) {\n        // Handle the response in chat format\n        if (response.data.humanizedResponse) {\n          if (response.data.intent === \"check_free_time\") {\n            // For check_free_time intent with HTML\n            setChatMessages(prev => [...prev, { \n              sender: 'bot', \n              content: response.data.humanizedResponse \n            }]);\n            setText(\"\");\n          } else {\n            // For other intents with text response\n            setChatMessages(prev => [...prev, { \n              sender: 'bot', \n              content: response.data.humanizedResponse \n            }]);\n          }\n        }\n        \n        if (response.data.intent === \"find_time\") {\n          setAvailableSlots(response.data.availableSlots);\n          setCalendarEvents(response.data.events || []);\n          setShowCalendar(true);\n          \n          // Check if we have the insufficientTime flag\n          if (response.data.insufficientTime) {\n            // Add error message to chat\n            setChatMessages(prev => [...prev, { \n              sender: 'bot', \n              type: 'error',\n              content: `INSUFFICIENT TIME: ${response.data.humanizedResponse || response.data.message} Select these slots or try a different timeframe.` \n            }]);\n          } else if (!response.data.humanizedResponse) {\n            // Only set this default message if humanizedResponse wasn't already set\n            setChatMessages(prev => [...prev, { \n              sender: 'bot', \n              content: \"Here are suggested time slots on your calendar. Click on slots to select/deselect them for scheduling.\" \n            }]);\n          }\n          \n          setEventDetails({\n            summary: response.data.calendar_title || getEventSummaryFromText(text),\n            description: text,\n            calendarId: response.data.predicted_calendar || \"primary\"\n          });\n        } else if (response.data.intent === \"view_events\") {\n          // Just display the humanized response for view_events, no calendar needed\n          setText(\"\");\n        } else if (response.data.intent === \"Create event\" && !response.data.humanizedResponse) {\n          // Fallback for create event if no humanizedResponse is available\n          setChatMessages(prev => [...prev, { \n            sender: 'bot', \n            type: 'success',\n            content: `Event created! ${response.data.eventLink ? `View it here: ${response.data.eventLink}` : ''}` \n          }]);\n          setText(\"\");\n        } else {\n          // For other intents or if we already set humanizedResponse\n          setText(\"\");\n        }\n      } else {\n        // Add error message to chat\n        setChatMessages(prev => [...prev, { \n          sender: 'bot', \n          type: 'error',\n          content: `Error: ${response.data.humanizedResponse || response.data.message}` \n        }]);\n      }\n    } catch (error) {\n      // Add error message to chat\n      setChatMessages(prev => [...prev, { \n        sender: 'bot', \n        type: 'error',\n        content: `Error: ${error.response?.data?.message || error.message}` \n      }]);\n    } finally {\n      setLoading(false);\n    }\n  }, [text, setLoading, setText, setChatMessages, setAvailableSlots, setCalendarEvents, setSelectedSlots, setShowCalendar, setEventDetails]);\n\n  // Event handler for scheduling items - using useCallback to avoid dependency issues\n  const handleScheduleItem = useCallback((event) => {\n    console.log(\"Custom event received:\", event.detail);\n    const { type, startTime, endTime } = event.detail;\n    const startDate = new Date();\n    const formattedDate = startDate.toLocaleDateString('en-US', { \n      month: 'long', \n      day: 'numeric',\n      year: 'numeric'\n    });\n    \n    if (type === 'break') {\n      const newText = `Schedule a break on ${formattedDate} from ${startTime} to ${endTime}`;\n      console.log(\"Setting text for break:\", newText);\n      setText(newText);\n      // Submit after React has updated the state\n      setTimeout(() => {\n        handleSubmit({ preventDefault: () => {} });\n      }, 50);\n    } else if (type === 'task') {\n      // Show prompt for task name\n      const taskName = prompt(\"What would you like to name this task?\", \"Work Session\");\n      if (taskName) {\n        const newText = `Schedule ${taskName} on ${formattedDate} from ${startTime} to ${endTime}`;\n        console.log(\"Setting text for task:\", newText);\n        setText(newText);\n        // Submit after React has updated the state\n        setTimeout(() => {\n          handleSubmit({ preventDefault: () => {} });\n        }, 50);\n      }\n    }\n  }, [setText, handleSubmit]);\n  \n  // Set up event listeners\n  useEffect(() => {\n    window.addEventListener('scheduleCalendarItem', handleScheduleItem);\n    \n    // Add event listener for refreshCalendar event\n    const handleRefreshCalendar = () => {\n      if (showCalendar) {\n        console.log(\"Refreshing calendar events via refreshCalendar event\");\n        fetchExistingEvents();\n      }\n    };\n    \n    window.addEventListener('refreshCalendar', handleRefreshCalendar);\n    \n    // Clean up event listeners\n    return () => {\n      window.removeEventListener('scheduleCalendarItem', handleScheduleItem);\n      window.removeEventListener('refreshCalendar', handleRefreshCalendar);\n    };\n  }, [handleScheduleItem, fetchExistingEvents, showCalendar]);\n\n  // Fetch existing events when calendar is shown or date range changes\n  useEffect(() => {\n    if (showCalendar) {\n      console.log(\"Fetching existing events because calendar is shown or date range changed\");\n      fetchExistingEvents();\n    }\n  }, [showCalendar, dateRange, fetchExistingEvents]);\n\n  // Fetch all calendars and current preferences on mount\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Use Promise.all to fetch calendars and preferences in parallel\n        const [calendarsResponse, prefsResponse] = await Promise.all([\n          axios.get('http://127.0.0.1:5000/api/get-calendars'),\n          axios.get('http://127.0.0.1:5000/api/get-preferred-calendars')\n        ]);\n        \n        if (!calendarsResponse.data.success) {\n          throw new Error(`Failed to fetch calendars: ${calendarsResponse.data.message || 'Unknown error'}`);\n        }\n        \n        if (!prefsResponse.data.success) {\n          throw new Error(`Failed to fetch preferred calendars: ${prefsResponse.data.message || 'Unknown error'}`);\n        }\n        \n        const allCalendars = calendarsResponse.data.calendars;\n        const preferredCals = prefsResponse.data.calendars;\n\n        // Update state all at once to avoid multiple re-renders\n        if (preferredCals.length > 0) {\n          // Ensure the saved preferences match the full calendar data\n          const syncedPrefs = preferredCals.map(pref => \n            allCalendars.find(cal => cal.id === pref.id) || pref\n          );\n          setCalendars(allCalendars);\n          setSelectedCalendars(syncedPrefs);\n        } else {\n          const primaryCal = allCalendars.find(cal => cal.primary);\n          setCalendars(allCalendars);\n          if (primaryCal) {\n            setSelectedCalendars([primaryCal]);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError(`Error loading calendars or preferences: ${error.message}`);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Send preferences to backend only when user changes them\n  useEffect(() => {\n    if (selectedCalendars.length > 0) {\n      const sendPreferences = async () => {\n        try {\n          // Debounce the API call to avoid excessive requests\n          const timeoutId = setTimeout(async () => {\n            const response = await axios.post('http://127.0.0.1:5000/api/set-preferred-calendars', {\n              calendars: selectedCalendars\n            });\n            if (!response.data.success) {\n              throw new Error(response.data.message);\n            }\n          }, 500); // Wait 500ms before sending the request\n          \n          // Clear the timeout if the effect runs again before it fires\n          return () => clearTimeout(timeoutId);\n        } catch (error) {\n          console.error('Error setting preferred calendars:', error);\n          setError('Error saving calendar preferences.');\n        }\n      };\n      sendPreferences();\n    }\n  }, [selectedCalendars]);\n\n  const handleCalendarSelect = useCallback((cal) => {\n    setSelectedCalendars((prev) => {\n      // Check if we're adding or removing a calendar\n      const isRemovingCalendar = prev.some((selected) => selected.id === cal.id);\n      const newCalendars = isRemovingCalendar\n        ? prev.filter((selected) => selected.id !== cal.id)\n        : [...prev, cal];\n        \n      // Clear events cache when calendars change\n      setEventsCache({});\n      return newCalendars;\n    });\n  }, [setEventsCache]);\n\n  const getEventSummaryFromText = (text) => {\n    const firstSentence = text.split('.')[0];\n    if (firstSentence.length <= 50) return firstSentence;\n    return firstSentence.substring(0, 50) + '...';\n  };\n\n  const handleEventClick = (info) => {\n    const { event } = info;\n    \n    // Only handle suggested slots\n    if (event.extendedProps.suggestedSlot) {\n      const eventData = {\n        start: event.start.toISOString(),\n        end: event.end.toISOString()\n      };\n      \n      // Toggle selection\n      setSelectedSlots(prev => {\n        const isAlreadySelected = prev.some(slot => \n          slot.start === eventData.start && slot.end === eventData.end\n        );\n        \n        if (isAlreadySelected) {\n          // Remove from selection\n          return prev.filter(slot => \n            !(slot.start === eventData.start && slot.end === eventData.end)\n          );\n        } else {\n          // Add to selection\n          return [...prev, eventData];\n        }\n      });\n      \n      // Update event color based on selection\n      const isSelected = !selectedSlots.some(slot => \n        slot.start === eventData.start && slot.end === eventData.end\n      );\n      \n      if (isSelected) {\n        event.setProp('backgroundColor', '#4caf50');\n        event.setProp('borderColor', '#2e7d32');\n        event.setProp('title', 'Selected Time');\n      } else {\n        event.setProp('backgroundColor', '#8bc34a');\n        event.setProp('borderColor', '#689f38');\n        event.setProp('title', 'Suggested Time');\n      }\n    } else {\n      // For existing events, show some details in a tooltip or alert\n      const eventTitle = event.title;\n      const eventTime = `${event.start.toLocaleTimeString()} - ${event.end.toLocaleTimeString()}`;\n      const calendarName = event.extendedProps.calendarName || 'Unknown Calendar';\n      \n      // Simple alert for demonstration - in a real app, you might want a tooltip or modal\n      alert(`Event: ${eventTitle}\\nTime: ${eventTime}\\nCalendar: ${calendarName}`);\n    }\n  };\n\n  const calculateTotalHours = () => {\n    let totalMinutes = 0;\n    selectedSlots.forEach(slot => {\n      const start = new Date(slot.start);\n      const end = new Date(slot.end);\n      const diffMinutes = (end - start) / (1000 * 60);\n      totalMinutes += diffMinutes;\n    });\n    const hours = Math.floor(totalMinutes / 60);\n    const minutes = Math.floor(totalMinutes % 60);\n    return `${hours}h ${minutes}m`;\n  };\n\n  const handleScheduleSelected = async () => {\n    if (selectedSlots.length === 0) return;\n\n    setLoading(true);\n    try {\n      // Create multiple events, one for each selected slot\n      const promises = selectedSlots.map(slot => {\n        return axios.post('http://127.0.0.1:5000/api/schedule-selected-slot', {\n          selectedSlot: slot,\n          eventDetails\n        });\n      });\n      \n      const results = await Promise.all(promises);\n      const allSuccessful = results.every(r => r.data.success);\n      \n      if (allSuccessful) {\n        // Add success message to chat\n        setChatMessages(prev => [...prev, { \n          sender: 'bot', \n          type: 'success',\n          content: `All ${selectedSlots.length} events scheduled successfully!` \n        }]);\n        \n        setText(\"\");\n        setShowCalendar(false);\n        setAvailableSlots([]);\n        setCalendarEvents([]);\n        setSelectedSlots([]);\n      } else {\n        // Add error message to chat\n        setChatMessages(prev => [...prev, { \n          sender: 'bot', \n          type: 'error',\n          content: `Error: Some events could not be scheduled.` \n        }]);\n      }\n    } catch (error) {\n      // Add error message to chat\n      setChatMessages(prev => [...prev, { \n        sender: 'bot', \n        type: 'error',\n        content: `Error: ${error.response?.data?.message || error.message}` \n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleFindDifferentTimes = () => {\n    // Add message to chat\n    setChatMessages(prev => [...prev, { \n      sender: 'bot', \n      content: \"Let's find another time. Please provide more details:\"\n    }]);\n    \n    setShowCalendar(false);\n    setAvailableSlots([]);\n    setCalendarEvents([]);\n    setSelectedSlots([]);\n  };\n  \n  const handleDatesSet = (dateInfo) => {\n    console.log(\"Calendar dates changed:\", dateInfo.startStr, \"to\", dateInfo.endStr);\n    setDateRange({\n      start: dateInfo.start,\n      end: dateInfo.end\n    });\n    \n    // If calendar is currently showing, fetch events for the new date range\n    if (showCalendar) {\n      console.log(\"Fetching events for new date range\");\n      fetchExistingEvents();\n    }\n  };\n  \n  // Optimize to avoid recalculation on each render\n  const getAllEvents = useCallback(() => {\n    // Start with existing events\n    const allEvents = [...existingEvents];\n    \n    // Add suggested slots with updated colors based on selection\n    if (calendarEvents.length > 0) {\n      calendarEvents.forEach(event => {\n        const isSelected = selectedSlots.some(slot => \n          slot.start === event.start && slot.end === event.end\n        );\n        \n        allEvents.push({\n          ...event,\n          backgroundColor: isSelected ? '#4caf50' : '#8bc34a',\n          borderColor: isSelected ? '#2e7d32' : '#689f38',\n          textColor: '#ffffff',\n          title: isSelected ? 'Selected Time' : 'Suggested Time',\n          display: 'block',\n          extendedProps: {\n            ...event.extendedProps,\n            suggestedSlot: true\n          }\n        });\n      });\n    }\n    \n    return allEvents;\n  }, [existingEvents, calendarEvents, selectedSlots]);\n\n  // Precalculate events to avoid useMemo in render\n  const currentEvents = getAllEvents();\n\n  // Render calendar in a chat message\n  const renderCalendarMessage = () => {\n    if (!showCalendar) return null;\n    \n    const currentEvents = getAllEvents();\n    \n    return (\n      <ChatMessage sender=\"bot\" isCalendarView={true} className=\"calendar-message\">\n        <div className=\"calendar-view w-full\">\n          {selectedSlots.length > 0 && (\n            <div className=\"bg-blue-50 border border-blue-100 rounded-lg p-4 mb-4 text-blue-800 font-medium\">\n              <p>Selected {selectedSlots.length} slot(s) - Total time: {calculateTotalHours()}</p>\n            </div>\n          )}\n          <div className=\"calendar-legend\">\n            {/* Legend for suggested/selected slots */}\n            <div className=\"legend-section\">\n              <div className=\"legend-item\">\n                <span className=\"legend-color suggested-event-color\"></span>\n                <span>Suggested Work Slots</span>\n              </div>\n              <div className=\"legend-item\">\n                <span className=\"legend-color selected-event-color\"></span>\n                <span>Selected Work Slots</span>\n              </div>\n            </div>\n            \n            {/* Legend for calendars */}\n            <div className=\"legend-section\">\n              <div className=\"legend-title\">Your Calendars:</div>\n              {selectedCalendars.map(cal => (\n                <div className=\"legend-item\" key={cal.id}>\n                  <span \n                    className=\"legend-color\" \n                    style={{ \n                      backgroundColor: cal.backgroundColor || getCalendarColor(cal.id),\n                      border: `1px solid ${cal.borderColor || getCalendarColor(cal.id, true)}`\n                    }}\n                  ></span>\n                  <span>{cal.summary}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          {/* Use the memoized calendar component with precalculated events */}\n          <CalendarComponent \n            events={currentEvents}\n            handleEventClick={handleEventClick}\n            handleDatesSet={handleDatesSet}\n            loading={loading || fetchingEvents} \n            renderEventContent={renderEventContent}\n          />\n          \n          <div className=\"flex mt-6 space-x-4\">\n            <button\n              onClick={handleScheduleSelected}\n              disabled={selectedSlots.length === 0 || loading}\n              className={`\n                px-6 py-3 rounded-lg font-medium flex items-center justify-center\n                ${selectedSlots.length === 0 || loading \n                  ? 'bg-gray-300 cursor-not-allowed text-gray-500' \n                  : 'bg-green-600 hover:bg-green-700 text-white shadow-md hover:shadow-lg transition-all duration-200'}\n              `}\n            >\n              {loading ? (\n                <div className=\"flex items-center\">\n                  <svg className=\"animate-spin -ml-1 mr-2 h-5 w-5\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                  </svg>\n                  Scheduling...\n                </div>\n              ) : `Schedule ${selectedSlots.length} Selected Time${selectedSlots.length === 1 ? '' : 's'}`}\n            </button>\n            <button\n              onClick={handleFindDifferentTimes}\n              disabled={loading}\n              className=\"px-6 py-3 bg-red-500 hover:bg-red-600 text-white rounded-lg font-medium shadow-md hover:shadow-lg transition-all duration-200\"\n            >\n              Find Different Times\n            </button>\n          </div>\n        </div>\n      </ChatMessage>\n    );\n  };\n\n  // Format events in a user-friendly way\n  const formatStyledEventList = (responseText) => {\n    console.log(\"Formatting response:\", responseText); // Debug to see what's being processed\n    \n    // First, check for specific format with Cmpt 310 or other course names\n    if (responseText.includes(\"Cmpt 310\") || responseText.includes(\"CMPT 310\")) {\n      try {\n        // Extract date more flexibly\n        let dateMatch = responseText.match(/for\\s+([A-Za-z]+\\s+\\d+(?:st|nd|rd|th)?,\\s+\\d{4})/i);\n        const dateStr = dateMatch ? dateMatch[1] : \"Today\";\n        \n        // Simpler regex to match formatted times and course info\n        const eventPattern = /\\*\\*([^*]+)\\*\\*:\\s*([^*\\n]+?)(?:\\sin\\s+([^*\\n]*))?(?=\\s*\\*\\*|\\s*$)/g;\n        let match;\n        const events = [];\n        \n        while ((match = eventPattern.exec(responseText)) !== null) {\n          console.log(\"Matched event:\", match); // Debug\n          const timeRange = match[1].trim();\n          const title = match[2].trim();\n          const location = match[3] ? match[3].trim() : '';\n          \n          events.push({\n            timeRange,\n            title,\n            location,\n            duration: calculateDuration(timeRange)\n          });\n        }\n        \n        // If we couldn't extract events with the regex, try a direct approach for the specific format\n        if (events.length === 0 && responseText.includes(\"AM\") && responseText.includes(\"PM\")) {\n          // Direct parsing for the specific format in the image\n          const timeMatch = responseText.match(/(\\d+:\\d+\\s*(?:AM|PM)\\s*-\\s*\\d+:\\d+\\s*(?:AM|PM))/i);\n          const courseMatch = responseText.match(/Cmpt\\s+\\d+|CMPT\\s+\\d+/i);\n          const locationMatch = responseText.match(/at\\s+([A-Z]+\\s+\\d+)/i);\n          \n          if (timeMatch && courseMatch) {\n            events.push({\n              timeRange: timeMatch[1].trim(),\n              title: courseMatch[0].trim() + (responseText.includes(\"OH\") ? \" Office Hours\" : \"\"),\n              location: locationMatch ? locationMatch[1].trim() : \"\",\n              duration: calculateDuration(timeMatch[1].trim())\n            });\n            console.log(\"Direct parse event:\", events[0]); // Debug\n          }\n        }\n        \n        // If we extracted events, format them nicely\n        if (events.length > 0) {\n          // Generate intro text\n          const introMatch = responseText.match(/^([^*]+)/);\n          const introText = introMatch ? introMatch[0].trim() : `Here's your schedule for ${dateStr}:`;\n          \n          return generateEventHTML(introText, dateStr, events);\n        }\n      } catch (error) {\n        console.error(\"Error formatting events:\", error);\n      }\n    }\n    \n    // Check if this is a schedule/calendar response with events\n    if ((responseText.includes(\"schedule\") || responseText.includes(\"calendar\") || \n         responseText.includes(\"looks like for\") || responseText.includes(\"have\") || \n         responseText.includes(\"Monday\") || responseText.includes(\"monday\")) && \n        (responseText.includes(\"**\") || responseText.includes(\"AM\") || responseText.includes(\"PM\"))) {\n      try {\n        // Extract date\n        let dateMatch = responseText.match(/(?:for|on)\\s+([A-Za-z]+\\s+\\d+(?:st|nd|rd|th)?,\\s+\\d{4})/i);\n        const dateStr = dateMatch ? dateMatch[1] : \n                       (responseText.toLowerCase().includes(\"monday\") ? \"Monday\" : \"Today\");\n        \n        // Parse events from the text - improved regex pattern to better capture events\n        const eventPattern = /\\*\\*([0-9:.APM\\s-]+)\\*\\*:\\s*([^*\\n]+?)(?:\\sin\\s+([^*\\n]*))?(?=\\s*\\*\\*|\\s*$)/g;\n        let match;\n        const events = [];\n        \n        while ((match = eventPattern.exec(responseText)) !== null) {\n          const timeRange = match[1].trim();\n          const title = match[2].trim();\n          const location = match[3] ? match[3].trim() : '';\n          \n          events.push({\n            timeRange,\n            title,\n            location,\n            duration: calculateDuration(timeRange)\n          });\n        }\n        \n        // Try alternative pattern if no events found\n        if (events.length === 0) {\n          const altPattern = /(\\d+(?::\\d+)?\\s*(?:AM|PM)\\s*-\\s*\\d+(?::\\d+)?\\s*(?:AM|PM))[\\s:]*([^()\\n,]+)(?:\\s+in\\s+([^()\\n,]+))?/gi;\n          while ((match = altPattern.exec(responseText)) !== null) {\n            events.push({\n              timeRange: match[1].trim(),\n              title: match[2].trim(),\n              location: match[3] ? match[3].trim() : '',\n              duration: calculateDuration(match[1].trim())\n            });\n          }\n        }\n        \n        // If we extracted events, format them nicely\n        if (events.length > 0) {\n          // Generate intro text\n          const introMatch = responseText.match(/^([^*]+)/);\n          const introText = introMatch ? introMatch[0].trim() : `Here's your schedule for ${dateStr}:`;\n          \n          return generateEventHTML(introText, dateStr, events);\n        } else {\n          // If we still couldn't find events, fall back to default formatting\n          return defaultStyledFormat(responseText);\n        }\n      } catch (error) {\n        console.error(\"Error formatting events:\", error);\n        return defaultStyledFormat(responseText);\n      }\n    }\n    \n    // For regular text responses, make them more visually interesting\n    if (!responseText.includes(\"<div\") && !responseText.includes(\"<p\") && !responseText.includes(\"<ul\")) {\n      // If it mentions free time, use a special format\n      if (responseText.toLowerCase().includes(\"free time\") || \n          responseText.toLowerCase().includes(\"available\") || \n          responseText.toLowerCase().includes(\"time slot\")) {\n        return generateFreeTimeHTML(responseText);\n      }\n      \n      // If it's a confirmation or completion message\n      if (responseText.toLowerCase().includes(\"scheduled\") || \n          responseText.toLowerCase().includes(\"created\") || \n          responseText.toLowerCase().includes(\"added\")) {\n        return generateConfirmationHTML(responseText);\n      }\n      \n      // Default enhanced format for other responses\n      return defaultStyledFormat(responseText);\n    }\n    \n    // Return original if no formatting applied\n    return responseText;\n  };\n  \n  // Helper function to calculate duration from a time range\n  const calculateDuration = (timeRange) => {\n    if (!timeRange || !timeRange.includes(\"-\")) return \"\";\n    \n    try {\n      const [startTime, endTime] = timeRange.split(\"-\").map(t => t.trim());\n      \n      const parseTime = (timeStr) => {\n        const [time, modifier] = timeStr.split(/\\s+/);\n        let [hours, minutes] = (time || \"\").split(':').map(Number);\n        minutes = minutes || 0;\n        if (modifier && modifier.toUpperCase() === 'PM' && hours < 12) hours += 12;\n        if (modifier && modifier.toUpperCase() === 'AM' && hours === 12) hours = 0;\n        return hours * 60 + minutes;\n      };\n      \n      const startMinutes = parseTime(startTime);\n      const endMinutes = parseTime(endTime);\n      const durationMinutes = endMinutes - startMinutes;\n      \n      if (durationMinutes > 0) {\n        const hours = Math.floor(durationMinutes / 60);\n        const mins = durationMinutes % 60;\n        return hours > 0 \n          ? `${hours} hour${hours > 1 ? 's' : ''}${mins > 0 ? ` ${mins} min` : ''}` \n          : `${mins} min`;\n      }\n      return \"\";\n    } catch (e) {\n      console.error(\"Error calculating duration:\", e);\n      return \"\";\n    }\n  };\n  \n  // Helper function to generate HTML for events\n  const generateEventHTML = (introText, dateStr, events) => {\n    return `\n      <div>\n        <p>${introText}</p>\n        <div class=\"styled-event-list\">\n          <div class=\"event-date\">${dateStr}</div>\n          ${events.map(event => {\n            // Determine background color based on event title (for courses)\n            let bgColor = '#e5edff'; // default blue background\n            let iconColor = '#3b82f6'; // default blue icon\n            \n            if (event.title.includes('CMPT 310') || event.title.includes('Cmpt 310')) {\n              bgColor = '#f3e8ff'; // purple for CMPT 310\n              iconColor = '#8b5cf6';\n            } else if (event.title.includes('CMPT 213') || event.title.includes('Cmpt 213')) {\n              bgColor = '#e0f2fe'; // light blue for CMPT 213\n              iconColor = '#0ea5e9';\n            } else if (event.title.includes('CMPT 276') || event.title.includes('Cmpt 276')) {\n              bgColor = '#dcfce7'; // green for CMPT 276\n              iconColor = '#22c55e';\n            } else if (event.title.includes('CMPT 105W') || event.title.includes('Cmpt 105W')) {\n              bgColor = '#ffedd5'; // orange for CMPT 105W\n              iconColor = '#f97316';\n            } else if (event.title.includes('OH') || event.title.includes('Office Hours')) {\n              bgColor = '#ffe4e6'; // pink for Office Hours\n              iconColor = '#e11d48';\n            }\n            \n            return `\n            <div class=\"event-item\">\n              <div class=\"event-item-icon\" style=\"background-color: ${bgColor}; color: ${iconColor};\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n                  <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\n                  <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\n                  <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\n                </svg>\n              </div>\n              <div>\n                <div class=\"event-time\">${event.timeRange}</div>\n                <div class=\"event-content\">\n                  <div class=\"event-title\">${event.title}</div>\n                  ${event.location ? `\n                    <div class=\"event-location\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                        <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\"></path>\n                        <circle cx=\"12\" cy=\"10\" r=\"3\"></circle>\n                      </svg>\n                      ${event.location}\n                    </div>\n                  ` : ''}\n                  ${event.duration ? `<div class=\"event-duration\">${event.duration}</div>` : ''}\n                </div>\n              </div>\n            </div>\n            `;\n          }).join('')}\n        </div>\n      </div>\n    `;\n  };\n  \n  // Helper function for free time format\n  const generateFreeTimeHTML = (responseText) => {\n    return `\n      <div class=\"styled-event-list\">\n        <div class=\"event-item\">\n          <div class=\"event-item-icon\" style=\"background-color: #ebf7ee; color: #34d399;\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n              <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\n              <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\n            </svg>\n          </div>\n          <div class=\"event-content\">\n            <p>${responseText}</p>\n          </div>\n        </div>\n      </div>\n    `;\n  };\n  \n  // Helper function for confirmation format\n  const generateConfirmationHTML = (responseText) => {\n    return `\n      <div class=\"styled-event-list\">\n        <div class=\"event-item\">\n          <div class=\"event-item-icon\" style=\"background-color: #e5edff; color: #3b82f6;\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n              <polyline points=\"20 6 9 17 4 12\"></polyline>\n            </svg>\n          </div>\n          <div class=\"event-content\">\n            <p>${responseText}</p>\n          </div>\n        </div>\n      </div>\n    `;\n  };\n  \n  // Helper function for default format\n  const defaultStyledFormat = (responseText) => {\n    return `\n      <div class=\"styled-event-list\">\n        <div class=\"event-item\">\n          <div class=\"event-item-icon\" style=\"background-color: #f5f3ff; color: #8b5cf6;\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n              <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n              <line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"></line>\n              <line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"></line>\n            </svg>\n          </div>\n          <div class=\"event-content\">\n            <p>${responseText}</p>\n          </div>\n        </div>\n      </div>\n    `;\n  };\n\n  // Render message content based on type\n  const renderMessage = (message, index) => {\n    if (message.type === 'welcome') {\n      return <WelcomeMessage key={index} />;\n    }\n    \n    if (message.type === 'error') {\n      return (\n        <ChatMessage \n          key={index} \n          sender={message.sender} \n          content={`<div class=\"error-content\">${message.content}</div>`} \n        />\n      );\n    }\n    \n    if (message.type === 'success') {\n      return (\n        <ChatMessage \n          key={index} \n          sender={message.sender} \n          content={`<div class=\"success-content\">${message.content}</div>`} \n        />\n      );\n    }\n    \n    // Format event lists in responses\n    const formattedContent = message.sender === 'bot' \n      ? formatStyledEventList(message.content) \n      : message.content;\n    \n    return (\n      <ChatMessage \n        key={index} \n        sender={message.sender} \n        content={formattedContent} \n      />\n    );\n  };\n\n  return (\n    <div className=\"w-full h-full\">\n      <ChatContainer>\n        <div className=\"relative\">\n          <ChatHeader />\n          <SettingsButton \n            onClick={() => setShowSettings(!showSettings)} \n            isOpen={showSettings} \n          />\n        </div>\n        \n        <div className={`settings-transition ${showSettings ? 'settings-open' : 'settings-closed'}`}>\n          {showSettings && (\n            <CalendarSettings \n              calendars={calendars}\n              selected={selectedCalendars}\n              onSelect={handleCalendarSelect}\n              disabled={loading}\n            />\n          )}\n        </div>\n        \n        <ChatMessages>\n          {chatMessages.map((msg, idx) => renderMessage(msg, idx))}\n          {showCalendar && renderCalendarMessage()}\n        </ChatMessages>\n        \n        <ChatInput\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          onSubmit={handleSubmit}\n          loading={loading}\n        />\n      </ChatContainer>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App w-full min-h-screen bg-gray-50 py-6\">\n      <div className=\"container mx-auto px-4\">\n        <h1 className=\"text-3xl font-bold mb-6 text-center text-gray-800\">ScheduleSync Assistant</h1>\n        <Suspense fallback={<div className=\"text-center p-10\">Loading application...</div>}>\n          <NaturalLanguageForm />\n        </Suspense>\n      </div>\n      \n      <script dangerouslySetInnerHTML={{\n        __html: `\n          // Directly define functions in the global scope\n          window.scheduleBreak = function(startTime, endTime) {\n            console.log(\"DOM scheduleBreak called with:\", startTime, endTime);\n            if (window.dispatchEvent) {\n              window.dispatchEvent(\n                new CustomEvent('scheduleCalendarItem', {\n                  detail: {\n                    type: 'break',\n                    startTime,\n                    endTime\n                  }\n                })\n              );\n            }\n          };\n          \n          window.scheduleTask = function(startTime, endTime) {\n            console.log(\"DOM scheduleTask called with:\", startTime, endTime);\n            if (window.dispatchEvent) {\n              window.dispatchEvent(\n                new CustomEvent('scheduleCalendarItem', {\n                  detail: {\n                    type: 'task',\n                    startTime,\n                    endTime\n                  }\n                })\n              );\n            }\n          };\n          \n          // Duration selector functions\n          window.showDurationSelector = function(startTime, endTime, selectorId, displayId, sliderId) {\n            console.log(\"Showing duration selector\", selectorId);\n            const durationSelector = document.getElementById(selectorId);\n            if (durationSelector) {\n              durationSelector.style.display = 'block';\n            } else {\n              console.error(\"Duration selector element not found:\", selectorId);\n            }\n          };\n          \n          window.updateDurationDisplay = function(minutes, displayId) {\n            console.log(\"Updating duration display to\", minutes, \"for\", displayId);\n            const durationDisplay = document.getElementById(displayId);\n            if (!durationDisplay) {\n              console.error(\"Duration display element not found:\", displayId);\n              return;\n            }\n            \n            let display = \"\";\n            if (minutes >= 60) {\n              const hours = Math.floor(minutes / 60);\n              const remainingMinutes = minutes % 60;\n              display = hours + \" hour\" + (hours > 1 ? \"s\" : \"\");\n              if (remainingMinutes > 0) {\n                display += \" \" + remainingMinutes + \" min\";\n              }\n            } else {\n              display = minutes + \" min\";\n            }\n            durationDisplay.textContent = display;\n          };\n          \n          window.scheduleBreakWithDuration = function(startTime, endTime, sliderId) {\n            console.log(\"Scheduling break with duration using slider\", sliderId);\n            const durationSlider = document.getElementById(sliderId);\n            if (!durationSlider) {\n              console.error(\"Duration slider not found:\", sliderId);\n              return;\n            }\n            \n            const durationMinutes = durationSlider.value;\n            console.log(\"Duration selected:\", durationMinutes);\n            \n            const startDateTime = new Date();\n            const [startHours, startMinutes] = startTime.split(':').map(Number);\n            startDateTime.setHours(startHours, startMinutes, 0);\n            \n            // Calculate end time based on selected duration\n            const endDateTime = new Date(startDateTime);\n            endDateTime.setMinutes(startDateTime.getMinutes() + parseInt(durationMinutes));\n            \n            const formattedEndTime = endDateTime.getHours().toString().padStart(2, '0') + ':' + \n                                  endDateTime.getMinutes().toString().padStart(2, '0');\n            \n            console.log(\"Calculated end time:\", formattedEndTime);\n            \n            // Call the existing scheduleBreak function\n            window.scheduleBreak(startTime, formattedEndTime);\n          };\n          \n          window.cancelDurationSelection = function(selectorId) {\n            console.log(\"Canceling duration selection for\", selectorId);\n            const durationSelector = document.getElementById(selectorId);\n            if (durationSelector) {\n              durationSelector.style.display = 'none';\n            } else {\n              console.error(\"Duration selector element not found:\", selectorId);\n            }\n          };\n          \n          console.log(\"Inline scheduling functions defined and attached to window object\");\n        `\n      }} />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}