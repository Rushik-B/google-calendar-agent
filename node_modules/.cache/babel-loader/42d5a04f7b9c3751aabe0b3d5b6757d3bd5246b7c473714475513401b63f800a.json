{"ast":null,"code":"var _jsxFileName = \"/Users/Rushik/Documents/caledar-example/calendar-example-react copy 2/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NaturalLanguageForm() {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [availableSlots, setAvailableSlots] = useState([]);\n  const [selectedSlots, setSelectedSlots] = useState([]);\n  const [eventDetails, setEventDetails] = useState({});\n  const [showTimeSelection, setShowTimeSelection] = useState(false);\n  const [calendars, setCalendars] = useState([]);\n  const [selectedCalendars, setSelectedCalendars] = useState([]);\n\n  // Fetch all calendars and current preferences on mount\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch all calendars\n        const calendarsResponse = await axios.get('http://127.0.0.1:5000/api/get-calendars');\n        if (!calendarsResponse.data.success) {\n          throw new Error('Failed to fetch calendars');\n        }\n        const allCalendars = calendarsResponse.data.calendars;\n        setCalendars(allCalendars);\n\n        // Fetch current preferred calendars\n        const prefsResponse = await axios.get('http://127.0.0.1:5000/api/get-preferred-calendars');\n        if (!prefsResponse.data.success) {\n          throw new Error('Failed to fetch preferred calendars');\n        }\n        const preferredCals = prefsResponse.data.calendars;\n\n        // If there are saved preferences, use them; otherwise, default to primary\n        if (preferredCals.length > 0) {\n          // Ensure the saved preferences match the full calendar data (e.g., include all fields)\n          const syncedPrefs = preferredCals.map(pref => allCalendars.find(cal => cal.id === pref.id) || pref);\n          setSelectedCalendars(syncedPrefs);\n        } else {\n          const primaryCal = allCalendars.find(cal => cal.primary);\n          if (primaryCal) {\n            setSelectedCalendars([primaryCal]);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError('Error loading calendars or preferences.');\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Send preferences to backend only when user changes them\n  useEffect(() => {\n    if (selectedCalendars.length > 0) {\n      const sendPreferences = async () => {\n        try {\n          const response = await axios.post('http://127.0.0.1:5000/api/set-preferred-calendars', {\n            calendars: selectedCalendars\n          });\n          if (!response.data.success) {\n            throw new Error(response.data.message);\n          }\n        } catch (error) {\n          console.error('Error setting preferred calendars:', error);\n          setError('Error saving calendar preferences.');\n        }\n      };\n      sendPreferences();\n    }\n  }, [selectedCalendars]);\n  const handleCalendarSelect = cal => {\n    setSelectedCalendars(prev => {\n      if (prev.some(selected => selected.id === cal.id)) {\n        return prev.filter(selected => selected.id !== cal.id);\n      } else {\n        return [...prev, cal];\n      }\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!text.trim()) return;\n    setLoading(true);\n    setError(\"\");\n    setMessage(\"\");\n    setAvailableSlots([]);\n    setSelectedSlots([]);\n    setShowTimeSelection(false);\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/api/natural-language-event', {\n        text\n      });\n      if (response.data.success) {\n        if (response.data.intent === \"find_time\") {\n          setAvailableSlots(response.data.availableSlots);\n          setShowTimeSelection(true);\n          setMessage(\"Here are suggested time slots to fulfill your request. Please select all slots you want to schedule:\");\n          setEventDetails({\n            summary: getEventSummaryFromText(text),\n            description: text,\n            calendarId: \"primary\"\n          });\n        } else {\n          setMessage(`Event created! ${response.data.eventLink ? `View it here: ${response.data.eventLink}` : ''}`);\n          setText(\"\");\n        }\n      } else {\n        setError(`Error: ${response.data.message}`);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setError(`Error: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getEventSummaryFromText = text => {\n    const firstSentence = text.split('.')[0];\n    if (firstSentence.length <= 50) return firstSentence;\n    return firstSentence.substring(0, 50) + '...';\n  };\n  const handleSlotSelect = slot => {\n    setSelectedSlots(prev => {\n      const isAlreadySelected = prev.some(s => s.start === slot.start && s.end === slot.end);\n      if (isAlreadySelected) {\n        return prev.filter(s => !(s.start === slot.start && s.end === slot.end));\n      } else {\n        return [...prev, slot];\n      }\n    });\n  };\n  const calculateTotalHours = () => {\n    let totalMinutes = 0;\n    selectedSlots.forEach(slot => {\n      const start = new Date(slot.start);\n      const end = new Date(slot.end);\n      const diffMinutes = (end - start) / (1000 * 60);\n      totalMinutes += diffMinutes;\n    });\n    const hours = Math.floor(totalMinutes / 60);\n    const minutes = totalMinutes % 60;\n    return `${hours}h ${minutes}m`;\n  };\n  const handleConfirmSlot = async () => {\n    if (selectedSlots.length === 0) return;\n    setLoading(true);\n    try {\n      // Create multiple events, one for each selected slot\n      const promises = selectedSlots.map(slot => {\n        return axios.post('http://127.0.0.1:5000/api/schedule-selected-slot', {\n          selectedSlot: slot,\n          eventDetails\n        });\n      });\n      const results = await Promise.all(promises);\n      const allSuccessful = results.every(r => r.data.success);\n      if (allSuccessful) {\n        setMessage(`All ${selectedSlots.length} events scheduled successfully!`);\n        setText(\"\");\n        setShowTimeSelection(false);\n        setAvailableSlots([]);\n        setSelectedSlots([]);\n      } else {\n        setError(`Error: Some events could not be scheduled.`);\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      setError(`Error: ${((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleRejectSlots = async () => {\n    setMessage(\"Let's find another time. Please provide more details:\");\n    setShowTimeSelection(false);\n    setAvailableSlots([]);\n    setSelectedSlots([]);\n  };\n  const formatDateTime = isoString => {\n    const date = new Date(isoString);\n    return date.toLocaleString('en-US', {\n      weekday: 'short',\n      month: 'short',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"natural-language-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create Event with Natural Language\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Calendars to Monitor:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), calendars.length > 0 ? calendars.map(cal => /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          display: 'block',\n          margin: '5px 0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedCalendars.some(selected => selected.id === cal.id),\n          onChange: () => handleCalendarSelect(cal),\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 15\n        }, this), cal.summary, \" \", cal.primary ? '(Primary)' : '']\n      }, cal.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading calendars...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 17\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 19\n    }, this), !showTimeSelection ? /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Describe your event:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: text,\n          onChange: e => setText(e.target.value),\n          disabled: loading,\n          rows: 3,\n          placeholder: \"e.g., 'Schedule a team meeting next Tuesday at 2pm' or 'Find me time to work on my project tomorrow afternoon'\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        className: \"submit-button\",\n        children: loading ? 'Processing...' : 'Submit'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-selection\",\n      children: [selectedSlots.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selection-summary\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Selected \", selectedSlots.length, \" slot(s) - Total time: \", calculateTotalHours()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"available-slots\",\n        children: availableSlots.length > 0 ? availableSlots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `slot-item ${selectedSlots.some(s => s.start === slot.start && s.end === slot.end) ? 'selected' : ''}`,\n          onClick: () => handleSlotSelect(slot),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slot-checkbox\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedSlots.some(s => s.start === slot.start && s.end === slot.end),\n              onChange: () => handleSlotSelect(slot)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slot-time\",\n            children: [formatDateTime(slot.start), \" to \", formatDateTime(slot.end).split(', ')[2]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-slots\",\n          children: \"No available time slots found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slot-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleConfirmSlot,\n          disabled: selectedSlots.length === 0 || loading,\n          className: \"confirm-button\",\n          children: loading ? 'Scheduling...' : `Schedule ${selectedSlots.length} Selected Time${selectedSlots.length === 1 ? '' : 's'}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRejectSlots,\n          disabled: loading,\n          className: \"reject-button\",\n          children: \"Find Different Times\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n}\n_s(NaturalLanguageForm, \"GnBZaIOA3/VP6BgREYg031apFIg=\");\n_c = NaturalLanguageForm;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(NaturalLanguageForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 307,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"NaturalLanguageForm\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","NaturalLanguageForm","_s","text","setText","loading","setLoading","message","setMessage","error","setError","availableSlots","setAvailableSlots","selectedSlots","setSelectedSlots","eventDetails","setEventDetails","showTimeSelection","setShowTimeSelection","calendars","setCalendars","selectedCalendars","setSelectedCalendars","fetchData","calendarsResponse","get","data","success","Error","allCalendars","prefsResponse","preferredCals","length","syncedPrefs","map","pref","find","cal","id","primaryCal","primary","console","sendPreferences","response","post","handleCalendarSelect","prev","some","selected","filter","handleSubmit","e","preventDefault","trim","intent","summary","getEventSummaryFromText","description","calendarId","eventLink","_error$response","_error$response$data","firstSentence","split","substring","handleSlotSelect","slot","isAlreadySelected","s","start","end","calculateTotalHours","totalMinutes","forEach","Date","diffMinutes","hours","Math","floor","minutes","handleConfirmSlot","promises","selectedSlot","results","Promise","all","allSuccessful","every","r","_error$response2","_error$response2$data","handleRejectSlots","formatDateTime","isoString","date","toLocaleString","weekday","month","day","hour","minute","hour12","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","margin","type","checked","onChange","disabled","onSubmit","value","target","rows","placeholder","required","index","onClick","_c","App","_c2","$RefreshReg$"],"sources":["/Users/Rushik/Documents/caledar-example/calendar-example-react copy 2/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nfunction NaturalLanguageForm() {\n  const [text, setText] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [availableSlots, setAvailableSlots] = useState([]);\n  const [selectedSlots, setSelectedSlots] = useState([]);\n  const [eventDetails, setEventDetails] = useState({});\n  const [showTimeSelection, setShowTimeSelection] = useState(false);\n  const [calendars, setCalendars] = useState([]);\n  const [selectedCalendars, setSelectedCalendars] = useState([]);\n\n  // Fetch all calendars and current preferences on mount\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch all calendars\n        const calendarsResponse = await axios.get('http://127.0.0.1:5000/api/get-calendars');\n        if (!calendarsResponse.data.success) {\n          throw new Error('Failed to fetch calendars');\n        }\n        const allCalendars = calendarsResponse.data.calendars;\n        setCalendars(allCalendars);\n\n        // Fetch current preferred calendars\n        const prefsResponse = await axios.get('http://127.0.0.1:5000/api/get-preferred-calendars');\n        if (!prefsResponse.data.success) {\n          throw new Error('Failed to fetch preferred calendars');\n        }\n        const preferredCals = prefsResponse.data.calendars;\n\n        // If there are saved preferences, use them; otherwise, default to primary\n        if (preferredCals.length > 0) {\n          // Ensure the saved preferences match the full calendar data (e.g., include all fields)\n          const syncedPrefs = preferredCals.map(pref => \n            allCalendars.find(cal => cal.id === pref.id) || pref\n          );\n          setSelectedCalendars(syncedPrefs);\n        } else {\n          const primaryCal = allCalendars.find(cal => cal.primary);\n          if (primaryCal) {\n            setSelectedCalendars([primaryCal]);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError('Error loading calendars or preferences.');\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Send preferences to backend only when user changes them\n  useEffect(() => {\n    if (selectedCalendars.length > 0) {\n      const sendPreferences = async () => {\n        try {\n          const response = await axios.post('http://127.0.0.1:5000/api/set-preferred-calendars', {\n            calendars: selectedCalendars\n          });\n          if (!response.data.success) {\n            throw new Error(response.data.message);\n          }\n        } catch (error) {\n          console.error('Error setting preferred calendars:', error);\n          setError('Error saving calendar preferences.');\n        }\n      };\n      sendPreferences();\n    }\n  }, [selectedCalendars]);\n\n  const handleCalendarSelect = (cal) => {\n    setSelectedCalendars((prev) => {\n      if (prev.some((selected) => selected.id === cal.id)) {\n        return prev.filter((selected) => selected.id !== cal.id);\n      } else {\n        return [...prev, cal];\n      }\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!text.trim()) return;\n\n    setLoading(true);\n    setError(\"\");\n    setMessage(\"\");\n    setAvailableSlots([]);\n    setSelectedSlots([]);\n    setShowTimeSelection(false);\n\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/api/natural-language-event', {\n        text\n      });\n\n      if (response.data.success) {\n        if (response.data.intent === \"find_time\") {\n          setAvailableSlots(response.data.availableSlots);\n          setShowTimeSelection(true);\n          setMessage(\"Here are suggested time slots to fulfill your request. Please select all slots you want to schedule:\");\n          setEventDetails({\n            summary: getEventSummaryFromText(text),\n            description: text,\n            calendarId: \"primary\"\n          });\n        } else {\n          setMessage(`Event created! ${response.data.eventLink ? `View it here: ${response.data.eventLink}` : ''}`);\n          setText(\"\");\n        }\n      } else {\n        setError(`Error: ${response.data.message}`);\n      }\n    } catch (error) {\n      setError(`Error: ${error.response?.data?.message || error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getEventSummaryFromText = (text) => {\n    const firstSentence = text.split('.')[0];\n    if (firstSentence.length <= 50) return firstSentence;\n    return firstSentence.substring(0, 50) + '...';\n  };\n\n  const handleSlotSelect = (slot) => {\n    setSelectedSlots(prev => {\n      const isAlreadySelected = prev.some(s => s.start === slot.start && s.end === slot.end);\n      if (isAlreadySelected) {\n        return prev.filter(s => !(s.start === slot.start && s.end === slot.end));\n      } else {\n        return [...prev, slot];\n      }\n    });\n  };\n\n  const calculateTotalHours = () => {\n    let totalMinutes = 0;\n    selectedSlots.forEach(slot => {\n      const start = new Date(slot.start);\n      const end = new Date(slot.end);\n      const diffMinutes = (end - start) / (1000 * 60);\n      totalMinutes += diffMinutes;\n    });\n    const hours = Math.floor(totalMinutes / 60);\n    const minutes = totalMinutes % 60;\n    return `${hours}h ${minutes}m`;\n  };\n\n  const handleConfirmSlot = async () => {\n    if (selectedSlots.length === 0) return;\n\n    setLoading(true);\n    try {\n      // Create multiple events, one for each selected slot\n      const promises = selectedSlots.map(slot => {\n        return axios.post('http://127.0.0.1:5000/api/schedule-selected-slot', {\n          selectedSlot: slot,\n          eventDetails\n        });\n      });\n      \n      const results = await Promise.all(promises);\n      const allSuccessful = results.every(r => r.data.success);\n      \n      if (allSuccessful) {\n        setMessage(`All ${selectedSlots.length} events scheduled successfully!`);\n        setText(\"\");\n        setShowTimeSelection(false);\n        setAvailableSlots([]);\n        setSelectedSlots([]);\n      } else {\n        setError(`Error: Some events could not be scheduled.`);\n      }\n    } catch (error) {\n      setError(`Error: ${error.response?.data?.message || error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRejectSlots = async () => {\n    setMessage(\"Let's find another time. Please provide more details:\");\n    setShowTimeSelection(false);\n    setAvailableSlots([]);\n    setSelectedSlots([]);\n  };\n\n  const formatDateTime = (isoString) => {\n    const date = new Date(isoString);\n    return date.toLocaleString('en-US', {\n      weekday: 'short',\n      month: 'short',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n\n  return (\n    <div className=\"natural-language-form\">\n      <h2>Create Event with Natural Language</h2>\n\n      <div className=\"calendar-selection\">\n        <h3>Select Calendars to Monitor:</h3>\n        {calendars.length > 0 ? (\n          calendars.map((cal) => (\n            <label key={cal.id} style={{ display: 'block', margin: '5px 0' }}>\n              <input\n                type=\"checkbox\"\n                checked={selectedCalendars.some((selected) => selected.id === cal.id)}\n                onChange={() => handleCalendarSelect(cal)}\n                disabled={loading}\n              />\n              {cal.summary} {cal.primary ? '(Primary)' : ''}\n            </label>\n          ))\n        ) : (\n          <p>Loading calendars...</p>\n        )}\n      </div>\n\n      {error && <div className=\"error-message\">{error}</div>}\n      {message && <div className=\"success-message\">{message}</div>}\n\n      {!showTimeSelection ? (\n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label>Describe your event:</label>\n            <textarea\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n              disabled={loading}\n              rows={3}\n              placeholder=\"e.g., 'Schedule a team meeting next Tuesday at 2pm' or 'Find me time to work on my project tomorrow afternoon'\"\n              required\n            />\n          </div>\n          <button type=\"submit\" disabled={loading} className=\"submit-button\">\n            {loading ? 'Processing...' : 'Submit'}\n          </button>\n        </form>\n      ) : (\n        <div className=\"time-selection\">\n          {selectedSlots.length > 0 && (\n            <div className=\"selection-summary\">\n              <p>Selected {selectedSlots.length} slot(s) - Total time: {calculateTotalHours()}</p>\n            </div>\n          )}\n          <div className=\"available-slots\">\n            {availableSlots.length > 0 ? (\n              availableSlots.map((slot, index) => (\n                <div\n                  key={index}\n                  className={`slot-item ${selectedSlots.some(s => s.start === slot.start && s.end === slot.end) ? 'selected' : ''}`}\n                  onClick={() => handleSlotSelect(slot)}\n                >\n                  <div className=\"slot-checkbox\">\n                    <input \n                      type=\"checkbox\" \n                      checked={selectedSlots.some(s => s.start === slot.start && s.end === slot.end)}\n                      onChange={() => handleSlotSelect(slot)}\n                    />\n                  </div>\n                  <div className=\"slot-time\">\n                    {formatDateTime(slot.start)} to {formatDateTime(slot.end).split(', ')[2]}\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"no-slots\">No available time slots found.</div>\n            )}\n          </div>\n          <div className=\"slot-actions\">\n            <button\n              onClick={handleConfirmSlot}\n              disabled={selectedSlots.length === 0 || loading}\n              className=\"confirm-button\"\n            >\n              {loading ? 'Scheduling...' : `Schedule ${selectedSlots.length} Selected Time${selectedSlots.length === 1 ? '' : 's'}`}\n            </button>\n            <button\n              onClick={handleRejectSlots}\n              disabled={loading}\n              className=\"reject-button\"\n            >\n              Find Different Times\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NaturalLanguageForm />\n      <hr />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,mBAAmBA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACiB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAACqB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACuB,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACyB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;;EAE9D;EACAC,SAAS,CAAC,MAAM;IACd,MAAM0B,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,iBAAiB,GAAG,MAAM1B,KAAK,CAAC2B,GAAG,CAAC,yCAAyC,CAAC;QACpF,IAAI,CAACD,iBAAiB,CAACE,IAAI,CAACC,OAAO,EAAE;UACnC,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAC9C;QACA,MAAMC,YAAY,GAAGL,iBAAiB,CAACE,IAAI,CAACP,SAAS;QACrDC,YAAY,CAACS,YAAY,CAAC;;QAE1B;QACA,MAAMC,aAAa,GAAG,MAAMhC,KAAK,CAAC2B,GAAG,CAAC,mDAAmD,CAAC;QAC1F,IAAI,CAACK,aAAa,CAACJ,IAAI,CAACC,OAAO,EAAE;UAC/B,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;QACxD;QACA,MAAMG,aAAa,GAAGD,aAAa,CAACJ,IAAI,CAACP,SAAS;;QAElD;QACA,IAAIY,aAAa,CAACC,MAAM,GAAG,CAAC,EAAE;UAC5B;UACA,MAAMC,WAAW,GAAGF,aAAa,CAACG,GAAG,CAACC,IAAI,IACxCN,YAAY,CAACO,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKH,IAAI,CAACG,EAAE,CAAC,IAAIH,IAClD,CAAC;UACDb,oBAAoB,CAACW,WAAW,CAAC;QACnC,CAAC,MAAM;UACL,MAAMM,UAAU,GAAGV,YAAY,CAACO,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACG,OAAO,CAAC;UACxD,IAAID,UAAU,EAAE;YACdjB,oBAAoB,CAAC,CAACiB,UAAU,CAAC,CAAC;UACpC;QACF;MACF,CAAC,CAAC,OAAO9B,KAAK,EAAE;QACdgC,OAAO,CAAChC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CC,QAAQ,CAAC,yCAAyC,CAAC;MACrD;IACF,CAAC;IACDa,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA1B,SAAS,CAAC,MAAM;IACd,IAAIwB,iBAAiB,CAACW,MAAM,GAAG,CAAC,EAAE;MAChC,MAAMU,eAAe,GAAG,MAAAA,CAAA,KAAY;QAClC,IAAI;UACF,MAAMC,QAAQ,GAAG,MAAM7C,KAAK,CAAC8C,IAAI,CAAC,mDAAmD,EAAE;YACrFzB,SAAS,EAAEE;UACb,CAAC,CAAC;UACF,IAAI,CAACsB,QAAQ,CAACjB,IAAI,CAACC,OAAO,EAAE;YAC1B,MAAM,IAAIC,KAAK,CAACe,QAAQ,CAACjB,IAAI,CAACnB,OAAO,CAAC;UACxC;QACF,CAAC,CAAC,OAAOE,KAAK,EAAE;UACdgC,OAAO,CAAChC,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;UAC1DC,QAAQ,CAAC,oCAAoC,CAAC;QAChD;MACF,CAAC;MACDgC,eAAe,CAAC,CAAC;IACnB;EACF,CAAC,EAAE,CAACrB,iBAAiB,CAAC,CAAC;EAEvB,MAAMwB,oBAAoB,GAAIR,GAAG,IAAK;IACpCf,oBAAoB,CAAEwB,IAAI,IAAK;MAC7B,IAAIA,IAAI,CAACC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACV,EAAE,KAAKD,GAAG,CAACC,EAAE,CAAC,EAAE;QACnD,OAAOQ,IAAI,CAACG,MAAM,CAAED,QAAQ,IAAKA,QAAQ,CAACV,EAAE,KAAKD,GAAG,CAACC,EAAE,CAAC;MAC1D,CAAC,MAAM;QACL,OAAO,CAAC,GAAGQ,IAAI,EAAET,GAAG,CAAC;MACvB;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMa,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAACjD,IAAI,CAACkD,IAAI,CAAC,CAAC,EAAE;IAElB/C,UAAU,CAAC,IAAI,CAAC;IAChBI,QAAQ,CAAC,EAAE,CAAC;IACZF,UAAU,CAAC,EAAE,CAAC;IACdI,iBAAiB,CAAC,EAAE,CAAC;IACrBE,gBAAgB,CAAC,EAAE,CAAC;IACpBI,oBAAoB,CAAC,KAAK,CAAC;IAE3B,IAAI;MACF,MAAMyB,QAAQ,GAAG,MAAM7C,KAAK,CAAC8C,IAAI,CAAC,kDAAkD,EAAE;QACpFzC;MACF,CAAC,CAAC;MAEF,IAAIwC,QAAQ,CAACjB,IAAI,CAACC,OAAO,EAAE;QACzB,IAAIgB,QAAQ,CAACjB,IAAI,CAAC4B,MAAM,KAAK,WAAW,EAAE;UACxC1C,iBAAiB,CAAC+B,QAAQ,CAACjB,IAAI,CAACf,cAAc,CAAC;UAC/CO,oBAAoB,CAAC,IAAI,CAAC;UAC1BV,UAAU,CAAC,sGAAsG,CAAC;UAClHQ,eAAe,CAAC;YACduC,OAAO,EAAEC,uBAAuB,CAACrD,IAAI,CAAC;YACtCsD,WAAW,EAAEtD,IAAI;YACjBuD,UAAU,EAAE;UACd,CAAC,CAAC;QACJ,CAAC,MAAM;UACLlD,UAAU,CAAC,kBAAkBmC,QAAQ,CAACjB,IAAI,CAACiC,SAAS,GAAG,iBAAiBhB,QAAQ,CAACjB,IAAI,CAACiC,SAAS,EAAE,GAAG,EAAE,EAAE,CAAC;UACzGvD,OAAO,CAAC,EAAE,CAAC;QACb;MACF,CAAC,MAAM;QACLM,QAAQ,CAAC,UAAUiC,QAAQ,CAACjB,IAAI,CAACnB,OAAO,EAAE,CAAC;MAC7C;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;MAAA,IAAAmD,eAAA,EAAAC,oBAAA;MACdnD,QAAQ,CAAC,UAAU,EAAAkD,eAAA,GAAAnD,KAAK,CAACkC,QAAQ,cAAAiB,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBlC,IAAI,cAAAmC,oBAAA,uBAApBA,oBAAA,CAAsBtD,OAAO,KAAIE,KAAK,CAACF,OAAO,EAAE,CAAC;IACtE,CAAC,SAAS;MACRD,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMkD,uBAAuB,GAAIrD,IAAI,IAAK;IACxC,MAAM2D,aAAa,GAAG3D,IAAI,CAAC4D,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACxC,IAAID,aAAa,CAAC9B,MAAM,IAAI,EAAE,EAAE,OAAO8B,aAAa;IACpD,OAAOA,aAAa,CAACE,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK;EAC/C,CAAC;EAED,MAAMC,gBAAgB,GAAIC,IAAI,IAAK;IACjCpD,gBAAgB,CAACgC,IAAI,IAAI;MACvB,MAAMqB,iBAAiB,GAAGrB,IAAI,CAACC,IAAI,CAACqB,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAKH,IAAI,CAACG,KAAK,IAAID,CAAC,CAACE,GAAG,KAAKJ,IAAI,CAACI,GAAG,CAAC;MACtF,IAAIH,iBAAiB,EAAE;QACrB,OAAOrB,IAAI,CAACG,MAAM,CAACmB,CAAC,IAAI,EAAEA,CAAC,CAACC,KAAK,KAAKH,IAAI,CAACG,KAAK,IAAID,CAAC,CAACE,GAAG,KAAKJ,IAAI,CAACI,GAAG,CAAC,CAAC;MAC1E,CAAC,MAAM;QACL,OAAO,CAAC,GAAGxB,IAAI,EAAEoB,IAAI,CAAC;MACxB;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMK,mBAAmB,GAAGA,CAAA,KAAM;IAChC,IAAIC,YAAY,GAAG,CAAC;IACpB3D,aAAa,CAAC4D,OAAO,CAACP,IAAI,IAAI;MAC5B,MAAMG,KAAK,GAAG,IAAIK,IAAI,CAACR,IAAI,CAACG,KAAK,CAAC;MAClC,MAAMC,GAAG,GAAG,IAAII,IAAI,CAACR,IAAI,CAACI,GAAG,CAAC;MAC9B,MAAMK,WAAW,GAAG,CAACL,GAAG,GAAGD,KAAK,KAAK,IAAI,GAAG,EAAE,CAAC;MAC/CG,YAAY,IAAIG,WAAW;IAC7B,CAAC,CAAC;IACF,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACN,YAAY,GAAG,EAAE,CAAC;IAC3C,MAAMO,OAAO,GAAGP,YAAY,GAAG,EAAE;IACjC,OAAO,GAAGI,KAAK,KAAKG,OAAO,GAAG;EAChC,CAAC;EAED,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAInE,aAAa,CAACmB,MAAM,KAAK,CAAC,EAAE;IAEhC1B,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF;MACA,MAAM2E,QAAQ,GAAGpE,aAAa,CAACqB,GAAG,CAACgC,IAAI,IAAI;QACzC,OAAOpE,KAAK,CAAC8C,IAAI,CAAC,kDAAkD,EAAE;UACpEsC,YAAY,EAAEhB,IAAI;UAClBnD;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,MAAMoE,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;MAC3C,MAAMK,aAAa,GAAGH,OAAO,CAACI,KAAK,CAACC,CAAC,IAAIA,CAAC,CAAC9D,IAAI,CAACC,OAAO,CAAC;MAExD,IAAI2D,aAAa,EAAE;QACjB9E,UAAU,CAAC,OAAOK,aAAa,CAACmB,MAAM,iCAAiC,CAAC;QACxE5B,OAAO,CAAC,EAAE,CAAC;QACXc,oBAAoB,CAAC,KAAK,CAAC;QAC3BN,iBAAiB,CAAC,EAAE,CAAC;QACrBE,gBAAgB,CAAC,EAAE,CAAC;MACtB,CAAC,MAAM;QACLJ,QAAQ,CAAC,4CAA4C,CAAC;MACxD;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MAAA,IAAAgF,gBAAA,EAAAC,qBAAA;MACdhF,QAAQ,CAAC,UAAU,EAAA+E,gBAAA,GAAAhF,KAAK,CAACkC,QAAQ,cAAA8C,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB/D,IAAI,cAAAgE,qBAAA,uBAApBA,qBAAA,CAAsBnF,OAAO,KAAIE,KAAK,CAACF,OAAO,EAAE,CAAC;IACtE,CAAC,SAAS;MACRD,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMqF,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpCnF,UAAU,CAAC,uDAAuD,CAAC;IACnEU,oBAAoB,CAAC,KAAK,CAAC;IAC3BN,iBAAiB,CAAC,EAAE,CAAC;IACrBE,gBAAgB,CAAC,EAAE,CAAC;EACtB,CAAC;EAED,MAAM8E,cAAc,GAAIC,SAAS,IAAK;IACpC,MAAMC,IAAI,GAAG,IAAIpB,IAAI,CAACmB,SAAS,CAAC;IAChC,OAAOC,IAAI,CAACC,cAAc,CAAC,OAAO,EAAE;MAClCC,OAAO,EAAE,OAAO;MAChBC,KAAK,EAAE,OAAO;MACdC,GAAG,EAAE,SAAS;MACdC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,SAAS;MACjBC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;EAED,oBACErG,OAAA;IAAKsG,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBACpCvG,OAAA;MAAAuG,QAAA,EAAI;IAAkC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE3C3G,OAAA;MAAKsG,SAAS,EAAC,oBAAoB;MAAAC,QAAA,gBACjCvG,OAAA;QAAAuG,QAAA,EAAI;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACpCxF,SAAS,CAACa,MAAM,GAAG,CAAC,GACnBb,SAAS,CAACe,GAAG,CAAEG,GAAG,iBAChBrC,OAAA;QAAoB4G,KAAK,EAAE;UAAEC,OAAO,EAAE,OAAO;UAAEC,MAAM,EAAE;QAAQ,CAAE;QAAAP,QAAA,gBAC/DvG,OAAA;UACE+G,IAAI,EAAC,UAAU;UACfC,OAAO,EAAE3F,iBAAiB,CAAC0B,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACV,EAAE,KAAKD,GAAG,CAACC,EAAE,CAAE;UACtE2E,QAAQ,EAAEA,CAAA,KAAMpE,oBAAoB,CAACR,GAAG,CAAE;UAC1C6E,QAAQ,EAAE7G;QAAQ;UAAAmG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnB,CAAC,EACDtE,GAAG,CAACkB,OAAO,EAAC,GAAC,EAAClB,GAAG,CAACG,OAAO,GAAG,WAAW,GAAG,EAAE;MAAA,GAPnCH,GAAG,CAACC,EAAE;QAAAkE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQX,CACR,CAAC,gBAEF3G,OAAA;QAAAuG,QAAA,EAAG;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAC3B;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EAELlG,KAAK,iBAAIT,OAAA;MAAKsG,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAE9F;IAAK;MAAA+F,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EACrDpG,OAAO,iBAAIP,OAAA;MAAKsG,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAEhG;IAAO;MAAAiG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAE3D,CAAC1F,iBAAiB,gBACjBjB,OAAA;MAAMmH,QAAQ,EAAEjE,YAAa;MAAAqD,QAAA,gBAC3BvG,OAAA;QAAKsG,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzBvG,OAAA;UAAAuG,QAAA,EAAO;QAAoB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACnC3G,OAAA;UACEoH,KAAK,EAAEjH,IAAK;UACZ8G,QAAQ,EAAG9D,CAAC,IAAK/C,OAAO,CAAC+C,CAAC,CAACkE,MAAM,CAACD,KAAK,CAAE;UACzCF,QAAQ,EAAE7G,OAAQ;UAClBiH,IAAI,EAAE,CAAE;UACRC,WAAW,EAAC,gHAAgH;UAC5HC,QAAQ;QAAA;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN3G,OAAA;QAAQ+G,IAAI,EAAC,QAAQ;QAACG,QAAQ,EAAE7G,OAAQ;QAACiG,SAAS,EAAC,eAAe;QAAAC,QAAA,EAC/DlG,OAAO,GAAG,eAAe,GAAG;MAAQ;QAAAmG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,gBAEP3G,OAAA;MAAKsG,SAAS,EAAC,gBAAgB;MAAAC,QAAA,GAC5B1F,aAAa,CAACmB,MAAM,GAAG,CAAC,iBACvBhC,OAAA;QAAKsG,SAAS,EAAC,mBAAmB;QAAAC,QAAA,eAChCvG,OAAA;UAAAuG,QAAA,GAAG,WAAS,EAAC1F,aAAa,CAACmB,MAAM,EAAC,yBAAuB,EAACuC,mBAAmB,CAAC,CAAC;QAAA;UAAAiC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjF,CACN,eACD3G,OAAA;QAAKsG,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAC7B5F,cAAc,CAACqB,MAAM,GAAG,CAAC,GACxBrB,cAAc,CAACuB,GAAG,CAAC,CAACgC,IAAI,EAAEuD,KAAK,kBAC7BzH,OAAA;UAEEsG,SAAS,EAAE,aAAazF,aAAa,CAACkC,IAAI,CAACqB,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAKH,IAAI,CAACG,KAAK,IAAID,CAAC,CAACE,GAAG,KAAKJ,IAAI,CAACI,GAAG,CAAC,GAAG,UAAU,GAAG,EAAE,EAAG;UAClHoD,OAAO,EAAEA,CAAA,KAAMzD,gBAAgB,CAACC,IAAI,CAAE;UAAAqC,QAAA,gBAEtCvG,OAAA;YAAKsG,SAAS,EAAC,eAAe;YAAAC,QAAA,eAC5BvG,OAAA;cACE+G,IAAI,EAAC,UAAU;cACfC,OAAO,EAAEnG,aAAa,CAACkC,IAAI,CAACqB,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAKH,IAAI,CAACG,KAAK,IAAID,CAAC,CAACE,GAAG,KAAKJ,IAAI,CAACI,GAAG,CAAE;cAC/E2C,QAAQ,EAAEA,CAAA,KAAMhD,gBAAgB,CAACC,IAAI;YAAE;cAAAsC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACxC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eACN3G,OAAA;YAAKsG,SAAS,EAAC,WAAW;YAAAC,QAAA,GACvBX,cAAc,CAAC1B,IAAI,CAACG,KAAK,CAAC,EAAC,MAAI,EAACuB,cAAc,CAAC1B,IAAI,CAACI,GAAG,CAAC,CAACP,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;UAAA;YAAAyC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrE,CAAC;QAAA,GAbDc,KAAK;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAcP,CACN,CAAC,gBAEF3G,OAAA;UAAKsG,SAAS,EAAC,UAAU;UAAAC,QAAA,EAAC;QAA8B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAC9D;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eACN3G,OAAA;QAAKsG,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3BvG,OAAA;UACE0H,OAAO,EAAE1C,iBAAkB;UAC3BkC,QAAQ,EAAErG,aAAa,CAACmB,MAAM,KAAK,CAAC,IAAI3B,OAAQ;UAChDiG,SAAS,EAAC,gBAAgB;UAAAC,QAAA,EAEzBlG,OAAO,GAAG,eAAe,GAAG,YAAYQ,aAAa,CAACmB,MAAM,iBAAiBnB,aAAa,CAACmB,MAAM,KAAK,CAAC,GAAG,EAAE,GAAG,GAAG;QAAE;UAAAwE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/G,CAAC,eACT3G,OAAA;UACE0H,OAAO,EAAE/B,iBAAkB;UAC3BuB,QAAQ,EAAE7G,OAAQ;UAClBiG,SAAS,EAAC,eAAe;UAAAC,QAAA,EAC1B;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACzG,EAAA,CAzSQD,mBAAmB;AAAA0H,EAAA,GAAnB1H,mBAAmB;AA4S5B,SAAS2H,GAAGA,CAAA,EAAG;EACb,oBACE5H,OAAA;IAAKsG,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBvG,OAAA,CAACC,mBAAmB;MAAAuG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvB3G,OAAA;MAAAwG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACkB,GAAA,GAPQD,GAAG;AASZ,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}